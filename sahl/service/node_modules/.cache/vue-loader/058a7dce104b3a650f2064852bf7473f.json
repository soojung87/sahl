{"remainingRequest":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\source\\service\\src\\components\\mainview.vue?vue&type=template&id=03c32e24&","dependencies":[{"path":"D:\\source\\service\\src\\components\\mainview.vue","mtime":1649813043258},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}