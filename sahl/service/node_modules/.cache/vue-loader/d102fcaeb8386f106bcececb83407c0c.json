{"remainingRequest":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\source\\service\\src\\components\\mainview.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\source\\service\\src\\components\\mainview.vue","mtime":1647399009966},{"path":"D:\\source\\service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoNCi8qICNtYWluLXZpZXcgew0KICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7DQogICAgb3ZlcmZsb3c6IHNjcm9sbDsNCiAgICBoZWlnaHQ6IDc3MHB4Ow0KfSAqLw0KDQouYmFzaWMtZm9ybSB7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgLyog7J206rKMIOyXhuycvOuptCBjb21wb25lbnTrk6TsnbQgIHgg7KKM7ZGc7JeQIOqwmeydtCDsnojsp4gg66q77ZWoICBo66eM7YG8IOuWqOyWtOyguOyEnCDrsLDsuZjrkKgqLw0KfQ0KLnZpcnR1YWwtZGlhZ3JhbXsNCiAgICBvcGFjaXR5OiAwLjc7DQp9DQoNCiNtYWluLXZpZXc6Oi13ZWJraXQtc2Nyb2xsYmFyIHsNCiAgd2lkdGg6IDZweDsNCiAgaGVpZ2h0OiA2cHg7DQp9DQojbWFpbi12aWV3Ojotd2Via2l0LXNjcm9sbGJhci10cmFjayB7DQogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Ow0KfQ0KI21haW4tdmlldzo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgew0KICBib3JkZXItcmFkaXVzOiAzcHg7DQogIGJhY2tncm91bmQtY29sb3I6IGdyYXk7DQp9DQojbWFpbi12aWV3Ojotd2Via2l0LXNjcm9sbGJhci1idXR0b24gew0KICB3aWR0aDogMDsNCiAgaGVpZ2h0OiAwOw0KfQ0KDQpkaXYgLyog7YWN7Iqk7Yq466W8IOuniOyasOyKpOuhnCDrk5zrnpjqt7jtlZjripQg6rKD7J2EIOuwqeyngO2VmOuKlCBDU1MgKi8NCnsNCiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAgLyrsnbXsiqTtlIzroZzrn6wgKi8NCiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLyrtjIzsnbTslrTtj63siqQgKi8NCiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAvKiovDQogIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8q7YGs66GsLCDsgqztjIzrpqwgKi8NCiAgdXNlci1zZWxlY3Q6IG5vbmU7DQp9IA0KDQoubGVhZGVyLWxpbmUgew0KICAgei1pbmRleDogMDsgDQp9DQoNCg=="},{"version":3,"sources":["mainview.vue"],"names":[],"mappingsyqCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"mainview.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div id=\"main-view\" v-dragscroll=\"drag\" v-on:dragscrollmove=\"dragBackground()\" class=\"grab-bing\" @scroll=\"onScroll()\"\r\n        @wheel=\"onmouseWheel\" @mousedown=\"onmouseDown\">\r\n        <v-app v-bind:style=\"{ transform: 'scale(' + zoom.value + ')' }\" > \r\n            <vue-draggable-resizable \r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.CompuMethod\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onCompuMethodDrag(element.uuid, left, top)\">\r\n                <CompuMethod :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.DataConstr\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onDataConstrDrag(element.uuid, left, top)\">\r\n                <DataConstr :element='element' :isDatailView=\"false\"/>\r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.ApplicationArrayDataType\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onApplicationArrayDataTypeDrag(element.uuid, left, top)\">\r\n                <ApplicationArrayDate :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.ImplementationDataType\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onImplementationDataTypeDrag(element.uuid, left, top)\">\r\n                <ImplementationDataType :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.Machine\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onMachineDrag(element.uuid, left, top)\">\r\n                <Machine :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.HWElement\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onHWElementDrag(element.uuid, left, top)\">\r\n                <HWElement :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.MachineDesign\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onMachineDesignDrag(element.uuid, left, top)\">\r\n                <MachineDesign :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.ModeDeclarationGroup\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onModeDeclarationGroupDrag(element.uuid, left, top)\">\r\n                <ModeDeclarationGroup :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.EthernetCluster\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onEthernetClusterDrag(element.uuid, left, top)\">\r\n                <EthernetCluster :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.HWCategory\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onHWCategoryDrag(element.uuid, left, top)\">\r\n                <HWCategory :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.ProtoMachineMapping\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProtoMachineMappingDrag(element.uuid, left, top)\">\r\n                <ProcessToMachine :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.SWComponents\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSWComponentsDrag(element.uuid, left, top)\">\r\n                <SWComponents :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.Process\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProcessDrag(element.uuid, left, top)\">\r\n                <Process :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.ProcessDesign\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProcessDesignDrag(element.uuid, left, top)\">\r\n                <ProcessDesign :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.Executable\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onExecutableDrag(element.uuid, left, top)\">\r\n                <Executable :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.StartupConfig\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onStartupConfigDrag(element.uuid, left, top)\">\r\n                <StartupConfig :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.DeterministicClient\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onDeterministicClientDrag(element.uuid, left, top)\">\r\n                <DeterministicClient :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServiceInterfaceDeployment\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPServiceDrag(element.uuid, left, top)\">\r\n                <SomeIPService :element='element' :isDatailView=\"false\"/>  <!-- :drag-handle=\"'.drag-handle'\" -->\r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ServiceInterface\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onServiceInterfaceDrag(element.uuid, left, top)\">\r\n                <ServiceInterface :element='element' :isDatailView=\"false\"/>  <!-- :drag-handle=\"'.drag-handle'\" -->\r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPClientEvent\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onClientDrag(element.uuid, left, top)\">\r\n                <Client :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServerEvent\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onServerDrag(element.uuid, left, top)\">\r\n                <Server :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPClientServiceInstance\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPClientDrag(element.uuid, left, top)\">\r\n                <SomeIPClient :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServerServiceInstance\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPServerDrag(element.uuid, left, top)\">\r\n                <SomeIPServer :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServiceInstanceToMachine\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPtoMachineDrag(element.uuid, left, top)\">\r\n                <SomeIPtoMachine :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ServiceInstanceToPortPrototype\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onToPortPrototypeDrag(element.uuid, left, top)\">\r\n                <ToPortPrototype :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.RequiredSomeIP\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onRequiredSomeIPDrag(element.uuid, left, top)\">\r\n                <RequiredSomeIP :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ProvidedSomeIP\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProvidedSomeIPDrag(element.uuid, left, top)\">\r\n                <ProvidedSomeIP :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ErrorDomain\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onErrorDomainDrag(element.uuid, left, top)\">\r\n                <APErrorDomain :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ErrorSet\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onErrorSetDrag(element.uuid, left, top)\">\r\n                <APErrorSet :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.Error\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onErrorDrag(element.uuid, left, top)\">\r\n                <APError :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n        </v-app>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport ServiceInterface from './serviceInterface.vue'\r\nimport CompuMethod from './compumethod.vue'\r\nimport DataConstr from './dataconstr.vue'\r\nimport ApplicationArrayDate from './applicationArrayData.vue'\r\nimport ImplementationDataType from './implementationData.vue'\r\nimport Machine from '../components/Machine.vue'\r\nimport HWElement from '../components/HWElement.vue'\r\nimport ModeDeclarationGroup from '../components/ModeDeclarationGroup.vue'\r\nimport MachineDesign from '../components/MachineDesign.vue'\r\nimport EthernetCluster from '../components/EthernetCluster.vue'\r\nimport DeterministicClient from '../components/DeterministicClient.vue'\r\nimport Executable from '../components/Executable.vue'\r\nimport Process from '../components/Process.vue'\r\nimport ProcessDesign from '../components/ProcessDesign.vue'\r\nimport ProcessToMachine from '../components/ProcessToMachine.vue'\r\nimport StartupConfig from '../components/StartupConfig.vue'\r\nimport SWComponents from '../components/SWComponents.vue'\r\nimport APErrorDomain from '../components/APErrorDomain.vue'\r\nimport APErrorSet from '../components/APErrorSet.vue'\r\nimport APError from '../components/APError.vue'\r\nimport Client from '../components/ClientEventG.vue'\r\nimport Server from '../components/Server.vue'\r\nimport SomeIPClient from '../components/SomeIPClient.vue'\r\nimport SomeIPServer from '../components/SomeIPServer.vue'\r\nimport SomeIPtoMachine from '../components/SomeIPtoMachineMapping.vue'\r\nimport SomeIPService from '../components/SomeIPService.vue'\r\nimport ToPortPrototype from '../components/ToPortPrototype.vue'\r\nimport RequiredSomeIP from '../components/RequiredSomeIP.vue'\r\nimport ProvidedSomeIP from '../components/ProvidedSomeIP.vue'\r\nimport HWCategory from '../components/HWCategory.vue'\r\n\r\nimport { EventBus } from '../main'\r\nimport LeaderLine from 'leader-line-vue'\r\nimport Panzoom from 'panzoom'\r\n\r\n\r\nexport default{\r\n    components:{CompuMethod, DataConstr, ApplicationArrayDate, ImplementationDataType, \r\n                SomeIPService, ServiceInterface, Client, Server,\r\n                SomeIPClient, SomeIPServer, SomeIPtoMachine, ToPortPrototype, RequiredSomeIP, ProvidedSomeIP,\r\n                APErrorDomain, APErrorSet, APError,\r\n                Machine, HWElement, ModeDeclarationGroup, MachineDesign, EthernetCluster, HWCategory,\r\n                DeterministicClient, Executable, Process, ProcessDesign, ProcessToMachine, StartupConfig, SWComponents},\r\n    computed: {\r\n        SAHLProject() {\r\n            return this.$store.state.SAHLProject\r\n        },\r\n        openProjectIndex() {\r\n            return this.$store.state.openProjectIndex\r\n        },\r\n        navigatorList() {\r\n            return this.$store.state.navigatorList\r\n        },\r\n        connectionLine() {\r\n            return this.$store.state.connectionLine\r\n        },\r\n        activeUUID() {\r\n            return this.$store.state.activeUUID\r\n        },\r\n        setting() {\r\n            return this.$store.state.setting\r\n        },\r\n        isInputFileComplate() {\r\n            return this.$store.state.isInputFileComplate\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            zoomInOut : null,\r\n            zoom: {\r\n                min: 0.2,\r\n                max: 2,\r\n                value: this.$store.state.setting.zoomMain,\r\n                step: 0.1,\r\n                originX: 0,\r\n                originY: 0\r\n            },\r\n            drag: true, //true: 배경 움직임, false: diagram움직임\r\n            connections: [],\r\n            sync: false,\r\n            // speed: 0.5,\r\n            //pos: { x: 0, y: 0 },\r\n            //target: { x: 0, y: 0 },\r\n            //pointer: { x: 0, y: 0 },\r\n            // scale: 1,\r\n\r\n        }\r\n    },\r\n    watch: {\r\n        setting(value) {\r\n            this.zoom.value = value.zoomMain\r\n        },\r\n        isInputFileComplate(value) {\r\n            //Input file한뒤에 그림이 그려지기 전에 선을 그리려고 하니 에러 \r\n            console.log(this.connections)\r\n            console.log(value)\r\n            if (value) {\r\n                this.$nextTick(() => {\r\n                    console.log('updata')\r\n                    this.$store.commit('checkLineInputXml')\r\n                    this.$store.commit('setInputFileComplate')\r\n                })\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        this.zoomInOut = Panzoom(document.getElementById('main-view'), {maxZoom: 2, minZoom: 0.2, \r\n                beforeWheel: function(e) {\r\n                    // allow wheel-zoom only if altKey is down. Otherwise - ignore\r\n                    var shouldIgnore = !e.shiftKey;\r\n                    return shouldIgnore;\r\n                }})\r\n        this.zoomInOut.pause();\r\n        window.addEventListener('keydown', ev => {\r\n            if (ev.keyCode === 17) {\r\n                this.sync = true;\r\n            }\r\n        })\r\n        window.addEventListener('keyup', ev => {\r\n            if (ev.keyCode === 17) {\r\n                this.sync = false;\r\n            }\r\n            if (ev.shiftKey) {\r\n                this.zoomInOut.pause()\r\n            }\r\n        })\r\n        EventBus.$on('new-line', (startdiagram, enddiagram) => {\r\n            console.log('new-line '+ startdiagram + '=='+ enddiagram)\r\n            this.addLine(startdiagram, enddiagram)\r\n            this.$nextTick(() => { // 다 그려진뒤에 move해줘야지 그려지기전에 하게되면 선이 이상한 곳에 가서 그려져있음\r\n                this.moveline()\r\n            })\r\n        });\r\n        EventBus.$on('delete-line', (numLine) => {\r\n            //console.log('delete-line'+ numLine)\r\n            this.connections[numLine].remove()\r\n            this.connections.splice(numLine, 1)\r\n        });\r\n        EventBus.$on('onActivated', (uuid) => {\r\n            this.onActivated(uuid)\r\n        })\r\n        EventBus.$on('onDeactivated', (uuid) => {\r\n            this.onDeactivated(uuid)\r\n        })\r\n        EventBus.$on('drawLine', () => { //v-hover 일때 쓰임\r\n            this.$nextTick(() => {  // 접혔던것들 다 그리고나서 그려줘야지 안그러면 선이 이동안한것 처럼 보인다\r\n                this.moveline()\r\n            })\r\n        })\r\n        EventBus.$on('drawLineTitleBar', (uuid, isopen) => { //title bar 일때 쓰임\r\n            if (!isopen) {\r\n                this.drawLineCloseTitlebar(uuid)\r\n            } else {\r\n                this.drawLineOpenTitlebar(uuid)\r\n            }\r\n            this.$nextTick(() => {  // 접혔던것들 다 그리고나서 그려줘야지 안그러면 선이 이동안한것 처럼 보인다\r\n                this.setanimationLine(uuid, true)\r\n                this.moveline()\r\n            })\r\n        })\r\n        EventBus.$on('changeLine-someipService', (item,uuid, idx,tabname, str1, str2) => {  //하나의 element에 tab이 2개가 있을 경우 item으로 구분해줘야한다.\r\n            this.$nextTick(() => { \r\n                this.drawLinTabMoveSomeIPServeice(item,uuid, idx,tabname, str1, str2) //ethernet Cluster에서 conditional name와 channel name이 필요해 str1 str2로 나뉨\r\n            })\r\n        })\r\n        EventBus.$on('goElement', (id) => {\r\n            console.log(id)\r\n            document.getElementById(id).scrollIntoView(true);\r\n            EventBus.$emit('active-element', id)\r\n        })\r\n    },\r\n    methods: {\r\n        onActivated(uuid) {\r\n            console.log('onActivated'+uuid)\r\n            this.isMouseDiagram = true\r\n            //this.$store.commit('setuuid', {uuid: uuid} ) //*** active-element 여기 event로 받는 곳에서 다 설정하기 때분에 안해도됨\r\n            //this.setZindex(uuid, 10) //***\r\n            EventBus.$emit('active-element', uuid)\r\n            this.drag = false\r\n            this.setanimationLine(uuid, true)\r\n        },\r\n        onDeactivated(uuid) {\r\n            console.log('onDeactivated'+ uuid)\r\n            this.setanimationLine(uuid, false)\r\n            this.isMouseDiagram = false\r\n            //this.$store.commit('setuuid', { uuid: null} ) //***\r\n            EventBus.$emit('active-element', null)\r\n            //this.setZindex(uuid, 2) //***\r\n            this.drag = true\r\n        },\r\n        setZindex(uuid, zidx){\r\n            var treeitem = Object.values(this.$store.getters.gettreeviewitems)\r\n            var arrelement = treeitem.find(data =>  data.uuid === uuid)\r\n            //console.log('setZindex'+ arrelement.parent)\r\n            this.$store.commit('setzIndex', {parent: arrelement.parent, uuid: uuid, zindex: zidx} )\r\n        },\r\n        onCompuMethodDrag(uuid, left, top){\r\n            this.$store.commit('editCompuMehtod', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onDataConstrDrag(uuid, left, top){\r\n            this.$store.commit('editDataConstr', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onApplicationArrayDataTypeDrag(uuid, left, top){\r\n            this.$store.commit('editApplicationArray', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onImplementationDataTypeDrag(uuid, left, top) {\r\n            this.$store.commit('editImplementation', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onMachineDrag(uuid, left, top){\r\n            this.$store.commit('editMachine', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onHWElementDrag(uuid, left, top){\r\n            this.$store.commit('editHWElement', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onHWCategoryDrag(uuid, left, top){\r\n            this.$store.commit('editHWCategory', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onMachineDesignDrag(uuid, left, top){\r\n            this.$store.commit('editMachineDesign', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onModeDeclarationGroupDrag(uuid, left, top){\r\n            this.$store.commit('editModeDeclarationGroup', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onEthernetClusterDrag(uuid, left, top){\r\n            this.$store.commit('editEthernetCluster', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProtoMachineMappingDrag(uuid, left, top){\r\n            this.$store.commit('editProtoMachineMapping', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSWComponentsDrag(uuid, left, top){\r\n            this.$store.commit('editSWComponents', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProcessDrag(uuid, left, top){\r\n            this.$store.commit('editProcess', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProcessDesignDrag(uuid, left, top){\r\n            this.$store.commit('editProcessDesign', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onExecutableDrag(uuid, left, top){\r\n            this.$store.commit('editExecutable', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onStartupConfigDrag(uuid, left, top){\r\n            this.$store.commit('editStartupConfig', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onDeterministicClientDrag(uuid, left, top){\r\n            this.$store.commit('editDeterministicClien', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPServiceDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPService', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onServiceInterfaceDrag(uuid, left, top){\r\n            this.$store.commit('editServiceInterface', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onClientDrag(uuid, left, top){\r\n            this.$store.commit('editClient', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onServerDrag(uuid, left, top){\r\n            this.$store.commit('editServer', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPClientDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPClient', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPServerDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPServer', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPtoMachineDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPtoMachine', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onToPortPrototypeDrag(uuid, left, top){\r\n            this.$store.commit('editToPortPrototype', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onRequiredSomeIPDrag(uuid, left, top){\r\n            this.$store.commit('editRequiredSomeIP', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProvidedSomeIPDrag(uuid, left, top){\r\n            this.$store.commit('editProvidedSomeIP', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onErrorDomainDrag(uuid, left, top){\r\n            this.$store.commit('editErrorDomain', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onErrorSetDrag(uuid, left, top){\r\n            this.$store.commit('editErrorSet', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onErrorDrag(uuid, left, top){\r\n            this.$store.commit('editError', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n\r\n        moveline() {\r\n            //console.log('moveline')\r\n            this.connections.forEach((connection) => connection.position());\r\n         },\r\n        addLine(start, end) {\r\n            this.connections.push (\r\n                LeaderLine.setLine(document.getElementById(start),  document.getElementById(end), {\r\n                            startPlug: 'disc',\r\n                            endPlug: 'arrow1',\r\n                            startSocket: 'auto',\r\n                            endSocket: 'auto',\r\n                            endPlugSize: 2,\r\n                            color: 'rgba(253, 105, 68, 0.4)',\r\n                            size: 1,\r\n            }))\r\n        },\r\n        setanimationLine(uuid, isactive) {\r\n            var activeLine = this.$store.getters.getactiveLine(uuid)\r\n            for (let i=0; i< activeLine.length;i++) {\r\n                if (isactive) {\r\n                    //this.connections[activeLine[i]].dash = {animation: isactive, len: 8, gap: 13}\r\n                    this.connections[activeLine[i]].size = 3\r\n                    this.connections[activeLine[i]].color = 'rgba(253, 105, 68, 1)'\r\n                } else {\r\n                    //this.connections[activeLine[i]].dash = false\r\n                    this.connections[activeLine[i]].size = 1\r\n                    this.connections[activeLine[i]].color = 'rgba(253, 105, 68, 0.4)'\r\n                }\r\n            }\r\n        },\r\n        dragBackground() {\r\n            //console.log('dragBackground')\r\n            this.moveline()\r\n        },\r\n\r\n        onmouseDown() { //edit dialog했을경우 임의로 activeuuid 값을 넣어줬기 때문에 배경을 누르면 toolbar색이 변하지 않는 이슈\r\n            if ((this.isMouseDiagram == false || this.isMouseDiagram == undefined) && this.drag == true) {\r\n                if (this.$store.state.activeUUID != null) {\r\n                    var treeitem = Object.values(this.$store.getters.gettreeviewitems)\r\n                    var arrelement = treeitem.find(data =>  data.uuid === this.$store.state.activeUUID)\r\n                    // 기존에 setuuid에 가지고 있던 값 z값 낮춰줘야한다.\r\n                    this.$store.commit('setzIndex', {parent:arrelement.parent, uuid: this.$store.state.activeUUID, zindex: 2} )\r\n                    this.$store.commit('setuuid', {uuid: null} )\r\n                }\r\n            }\r\n        },\r\n        onScroll() { //wheel을 빠르게 움직이면 line이 제대로 안그려지는데 여기에 moveline 넣으면 잘작동함\r\n            //console.log('onScroll')\r\n            this.moveline()\r\n        },\r\n        onmouseWheel(ev) {\r\n            console.log('onmouseWheel   '+ ev.shiftKey)\r\n            if (!ev.shiftKey) {\r\n                this.moveline()\r\n                return\r\n            }\r\n            this.zoomInOut.resume()\r\n            ev.preventDefault()\r\n            this.zoomInOut.zoomWithWheel(ev)\r\n\r\n            // ev.preventDefault();\r\n\r\n            // if (ev.deltaY < 0) {\r\n            //     this.zoom.value = this.zoom.value >= this.zoom.max ? this.zoom.max : this.zoom.value + this.zoom.step;\r\n                \r\n            // } else  if (ev.deltaY > 0) {\r\n            //     this.zoom.value = this.zoom.value <= this.zoom.min ? this.zoom.min : this.zoom.value - this.zoom.step;\r\n            // }\r\n        },\r\n        drawLineCloseTitlebar(uuid) {\r\n            var activeLine = this.$store.getters.getactiveLine(uuid)\r\n            for (let i=0; i< activeLine.length;i++) {\r\n                this.connections[activeLine[i]].remove()\r\n                this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                            startPlug: 'disc',\r\n                            endPlug: 'arrow1',\r\n                            startSocket: 'auto',\r\n                            endSocket: 'auto',\r\n                            endPlugSize: 2,\r\n                            color: 'rgba(253, 105, 68, 0.4)',\r\n                            size: 1,\r\n                }))\r\n            }\r\n        },\r\n        drawLineOpenTitlebar(uuid) {\r\n            var activeLine = this.$store.getters.getactiveLine(uuid)\r\n            var startLine\r\n            for (let i=0; i< activeLine.length;i++) {\r\n                startLine = this.$store.getters.getStartLineInfo(activeLine[i]) \r\n                var startUUID = startLine.split('/')\r\n                var tableLine = startUUID[1].split('-')\r\n                //tab이 아닌 애들만 선그리기\r\n                if (!(tableLine[0] == 'field' || tableLine[0] == 'event' || tableLine[0] == 'argtable' || tableLine[0] == 'methoderrors' || tableLine[0] == 'methoderror' ||\r\n                     tableLine[0] == 'requiredEventG' || tableLine[0] == 'requiredClient' || tableLine[0] == 'providEventG' || tableLine[0] == 'providServer' ||\r\n                     tableLine[0] == 'fgcontext' || tableLine[0] == 'fgtarget' || tableLine[0] == 'processresorce' || tableLine[0] == 'processstartup' ||\r\n                     tableLine[0] == 'comconet')) {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(tableLine[0] == 'ddpccompu' || tableLine[0] == 'ddpcdata'){ //implementation에서 table에 ref가 두개라..\r\n                        tableLine[0] = 'DDPC'\r\n                    } \r\n                    this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/'+tableLine[0]),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                startPlug: 'disc',\r\n                                endPlug: 'arrow1',\r\n                                startSocket: 'auto',\r\n                                endSocket: 'auto',\r\n                                endPlugSize: 2,\r\n                                color: 'rgba(253, 105, 68, 0.4)',\r\n                                size: 1,\r\n                    }))\r\n                }\r\n            }\r\n        },\r\n        drawLinTabMoveSomeIPServeice(item, uuid, idx, tabname, str1, str2) {\r\n            var activeLine = this.$store.getters.getactiveLine(uuid)\r\n            var startLine\r\n            for (let i=0; i< activeLine.length;i++) {\r\n                startLine = this.$store.getters.getStartLineInfo(activeLine[i]) \r\n                var startUUID = startLine.split('/')\r\n                var tableLine = startUUID[1].split('-')\r\n                if (tableLine[0] == 'field' && item == 'field') {\r\n                    console.log('/field')\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]){\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/fieldtab'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/field'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'event' && item == 'event') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    console.log('/event')\r\n                    if(idx == tableLine[2]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/eventtab'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/event'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'argtable' ) {\r\n                    //console.log('/argtable')\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[2]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/argtable'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/methods'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'methoderrors') {\r\n                     //console.log('/methoderrors')\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[2]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/methoderrors'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/methods'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'methoderror') {\r\n                     //console.log('/methoderror')\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[2]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/methoderror'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/methods'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'requiredEventG') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/requiredEventG'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/requiredE'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'requiredClient') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/requiredClient'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/requiredE'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'providEventG') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/providEventG'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/providE'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'providServer') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/providServer'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/providE'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'fgcontext') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[2]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/fgtable'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/processStarupC'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'fgtarget') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[2]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/fgtable'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/processStarupC'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'processresorce') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/processresorce'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/processStarupC'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'processstartup') {\r\n                    console.log('processstartup')\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[1]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/processstartup'+tabname),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/processStarupC'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'comconet' && item == 'connector') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(idx == tableLine[2] && tabname == tableLine[3]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/comconet'+str1+'-'+str2),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else if (idx != tableLine[2] && tabname == tableLine[3]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/channel'+str2),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/conditional'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                }  else if (tableLine[0] == 'comconet' && item == 'channel') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    if(tabname == tableLine[3]) {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/channel'+str1),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    } else {\r\n                        this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/conditional'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                    startPlug: 'disc',\r\n                                    endPlug: 'arrow1',\r\n                                    startSocket: 'auto',\r\n                                    endSocket: 'auto',\r\n                                    endPlugSize: 2,\r\n                                    color: 'rgba(253, 105, 68, 0.4)',\r\n                                    size: 1,\r\n                        }))\r\n                    }\r\n                } else if (tableLine[0] == 'comconet' && item == 'conditional') {\r\n                    this.connections[activeLine[i]].remove()\r\n                    this.connections.splice(activeLine[i], 1, LeaderLine.setLine(document.getElementById(uuid+'/conditional'),  document.getElementById( this.$store.getters.getEndLineInfo(activeLine[i])), {\r\n                                startPlug: 'disc',\r\n                                endPlug: 'arrow1',\r\n                                startSocket: 'auto',\r\n                                endSocket: 'auto',\r\n                                endPlugSize: 2,\r\n                                color: 'rgba(253, 105, 68, 0.4)',\r\n                                size: 1,\r\n                    }))\r\n                    \r\n                }\r\n            }\r\n            \r\n            this.$nextTick(() => {\r\n                this.setanimationLine(uuid, true)\r\n                this.moveline()\r\n            })\r\n\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n/* #main-view {\r\n    white-space: nowrap;\r\n    overflow: scroll;\r\n    height: 770px;\r\n} */\r\n\r\n.basic-form {\r\n    cursor: pointer;\r\n    position: absolute; /* 이게 없으면 component들이  x 좌표에 같이 있질 못함  h만큼 떨어져서 배치됨*/\r\n}\r\n.virtual-diagram{\r\n    opacity: 0.7;\r\n}\r\n\r\n#main-view::-webkit-scrollbar {\r\n  width: 6px;\r\n  height: 6px;\r\n}\r\n#main-view::-webkit-scrollbar-track {\r\n  background-color: transparent;\r\n}\r\n#main-view::-webkit-scrollbar-thumb {\r\n  border-radius: 3px;\r\n  background-color: gray;\r\n}\r\n#main-view::-webkit-scrollbar-button {\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\ndiv /* 텍스트를 마우스로 드래그하는 것을 방지하는 CSS */\r\n{\r\n  -ms-user-select: none;  /*익스플로러 */\r\n  -moz-user-select: none; /*파이어폭스 */\r\n  -khtml-user-select: none; /**/\r\n  -webkit-user-select: none; /*크롬, 사파리 */\r\n  user-select: none;\r\n} \r\n\r\n.leader-line {\r\n   z-index: 0; \r\n}\r\n\r\n</style>"]}]}