{"remainingRequest":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\src\\components\\MachineDesign.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\src\\components\\MachineDesign.vue","mtime":1625189853493},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit(noMove)\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCiNtYWNoaW5lZGVzaWduIHsNCiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgIG92ZXJmbG93OiBoaWRkZW47DQp9DQo="},{"version":3,"sources":["MachineDesign.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqTA;AACA;AACA;AACA","file":"MachineDesign.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div id=\"machinedesign\">\r\n        <v-app  style=\"height: 400px;\">\r\n            <v-app-bar app absolute color=\"teal lighten-3\" dark hide-on-scroll dense>\r\n                <v-toolbar-title>Machine-Design</v-toolbar-title>\r\n            </v-app-bar>\r\n            <v-content>\r\n                <v-container>\r\n                    <v-row style=\"height: 50px;\">\r\n                        <v-col cols='3'>\r\n                            <label>Name</label>\r\n                        </v-col>\r\n                        <v-col cols='9'>\r\n                            <v-text-field type=\"text\" v-model=\"machinDName\" placeholder=\"String\" outlined dense></v-text-field>\r\n                        </v-col>\r\n                    </v-row>\r\n                    <v-row style=\"height: 50px;\">\r\n                        <v-col cols='3'>\r\n                            <label>Access-Control</label>\r\n                        </v-col>\r\n                        <v-col cols='9'>\r\n                            <v-select :items=\"accessControl\" outlined dense></v-select>\r\n                        </v-col>\r\n                    </v-row>\r\n                     <v-row style=\"height: 50px;\">\r\n                        <v-col cols='3'>\r\n                            <label>PN-reset-Timer</label>\r\n                        </v-col>\r\n                        <v-col cols='9'>\r\n                            <v-text-field type=\"text\" v-model=\"pnResetTimer\"  placeholder=\"TIME\" outlined dense></v-text-field>\r\n                        </v-col>\r\n                    </v-row>\r\n                    <v-row >\r\n                        <v-col cols='3'>\r\n                            <label>Communication-Connectors</label>\r\n                        </v-col>\r\n                        <v-col cols=\"9\">\r\n                            <v-data-table :headers=\"headersCC\" :items='connector' hide-default-footer class=\"elevation-1\">\r\n                            </v-data-table>\r\n                        </v-col>\r\n                    </v-row>\r\n                    <v-row style=\"height: 50px;\">\r\n                        <v-col cols='3'>\r\n                            <label>Service-discover-configs</label>\r\n                        </v-col>\r\n                        <v-col cols='9'>\r\n                            <v-select v-model=\"selsdConfig\" :items=\"serviceDiscoverConfig\" outlined dense></v-select>\r\n                        </v-col>\r\n                        <v-col cols=\"3\"></v-col>\r\n                    </v-row>\r\n                </v-container>\r\n            </v-content>\r\n        </v-app>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            accessControl: ['MODELED', 'CUSTOM'],\r\n            machinDName: \"\",\r\n            dialogNewConnector: false,\r\n            dialogDelete: false,\r\n            dialogIPAddr: false,\r\n            dialogEndPointlist: false,\r\n            dialogNewSSD: false,\r\n            editedIndexCC: -1,\r\n            max25chars: v => v.length <= 25 || 'Input too long!',\r\n            headersCC: [\r\n                { text: 'name', align: 'start', sortable: false, value: 'name' },\r\n                { text: 'MTU',  sortable: false, value: 'mtu' },\r\n                { text: 'MTU Enable', sortable: false, value: 'mtuenable' },\r\n                { text: 'MTU Timeout', sortable: false, value: 'une' },\r\n                { text: 'Unicast Network End Point', value: 'endpoint', sortable: false },\r\n            ],\r\n            connector: [\r\n                {\r\n                    name: \"CCU20_Connector\",\r\n                    mtu: \"1024\",\r\n                    mtuenable: 'true',\r\n                    une: '2.0',\r\n                    endpoint: ''\r\n                }\r\n            ],\r\n            selitemune: ['CCU20_NwEndpoint', 'CCU20_SD_NwEndpoint','CCU20'],\r\n            editedItemCC: {\r\n                name: '',\r\n                pme: false,\r\n                une: '',\r\n            },\r\n            defaultItemCC: {\r\n                name: '',\r\n                pme: false,\r\n                une: '',\r\n            },\r\n            pnResetTimer: '',\r\n            serviceDiscoverConfig: ['SomeIp-Service-Discovery'],\r\n            networkendpointaddr: ['IPV-4-CONFIGURATION'],\r\n            selNWendpointaddr: '',\r\n            ipAddrname: \"\",\r\n            selsdConfig: \"\",\r\n            headersSSD: [\r\n                { text: 'Multicast-SD-Ip-Address', align: 'start', sortable: false, value: 'msia' },\r\n                { text: 'SomeIP-Service-discovery-port', align: 'start', sortable: false, value: 'ssdp' },\r\n                { text: 'Actions', value: 'actions', sortable: false },\r\n            ],\r\n            ssDiscovery: [\r\n                {\r\n                    msia: '',\r\n                    ssdp: '30490',\r\n                }\r\n            ],\r\n            editedItemSSD: {\r\n                msia: '',\r\n                ssdp: '',\r\n            },\r\n            defaultItemSSD: {\r\n                msia: '',\r\n                ssdp: '',\r\n            },\r\n            editedIndexSSD: -1,\r\n            isSSDedit: false,\r\n            isendpointedit: false,\r\n        }\r\n    },\r\n    methods: {\r\n        saveMachineDesign () {\r\n            this.$router.go(-1);\r\n        },\r\n        cancelMachineDesign (){\r\n            this.$router.go(-1);\r\n        },\r\n        editItemCC (item) {\r\n            this.editedIndexCC = this.connector.indexOf(item)\r\n            this.editedItemCC = Object.assign({}, item)\r\n            this.dialogNewConnector = true\r\n        },\r\n        editItemSSD (item) {\r\n            this.editedIndexSSD = this.ssDiscovery.indexOf(item)\r\n            this.editedItemSSD = Object.assign({}, item)\r\n            this.dialogNewSSD = true\r\n        },\r\n        deleteItemCC (item) {\r\n            this.editedIndexCC = this.connector.indexOf(item)\r\n            this.editedItemCC = Object.assign({}, item)\r\n            this.dialogDelete = true\r\n        },\r\n        deleteItemSSD (item) {\r\n            this.editedIndexSSD = this.ssDiscovery.indexOf(item)\r\n            this.editedItemSSD = Object.assign({}, item)\r\n            this.dialogDelete = true\r\n        },\r\n        deleteItemConfirm (isConnector) {\r\n            if (isConnector == true) {\r\n                this.connector.splice(this.editedIndexCC, 1) //splice() 메소드는 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경한다. 이 메소드는 원본 배열 자체를 수정한다.\r\n            } else {\r\n                this.ssDiscovery.splice(this.editedIndexSSD, 1)\r\n            }\r\n            this.closeDelete()\r\n        },\r\n        closeDelete () {\r\n            this.dialogDelete = false\r\n            this.$nextTick(() => { //데이터갱신 후 UI까지 완료한 뒤에 nextTick에 있는 함수를 최종적으로 수행\r\n                this.editedItemCC = Object.assign({}, this.defaultItemCC) //Object.assign() 메소드는 열거할 수 있는 하나 이상의 출처 객체로부터 대상 객체로 속성을 복사할 때 사용합니다. 대상 객체를 반환합니다.\r\n                this.editedItemSSD = Object.assign({}, this.defaultItemSSD)\r\n                this.editedIndexCC = -1\r\n                this.editedIndexSSD = -1\r\n            })\r\n        },\r\n        closeNewConnector () {\r\n            this.dialogNewConnector = false\r\n            this.$nextTick(() => {\r\n                this.editedItemCC = Object.assign({}, this.defaultItemCC) // 빈 객체를 선언 함으로써, 새로운 메모리 위치로 재정의\r\n                this.editedIndexCC = -1\r\n            })\r\n        },\r\n        closeNewSSD () {\r\n            this.dialogNewSSD = false\r\n            this.$nextTick(() => {\r\n                this.editedItemSSD = Object.assign({}, this.defaultItemSSD) // 빈 객체를 선언 함으로써, 새로운 메모리 위치로 재정의\r\n                this.editedIndexSSD = -1\r\n            })\r\n        },\r\n        saveNewConnector () {\r\n            if (this.editedIndexCC > -1) {\r\n                Object.assign(this.connector[this.editedIndexCC], this.editedItemCC)\r\n            } else {\r\n                this.connector.push(this.editedItemCC)\r\n            }\r\n            this.closeNewConnector()\r\n        },\r\n        saveNewSSD () {\r\n            if (this.editedIndexSSD > -1) {\r\n                Object.assign(this.ssDiscovery[this.editedIndexSSD], this.editedItemSSD)\r\n            } else {\r\n                this.ssDiscovery.push(this.editedItemSSD)\r\n            }\r\n            this.closeNewSSD()\r\n        },\r\n        saveNewIPAddr () { //?? endpoint 값 edit하면 이미 그 값을 가지고 있던 애들은 어찌 수정해야할까????\r\n            this.dialogIPAddr =false;\r\n            alert(this.selitemune.findIndex(data => data === this.selNetworkEndpoint))\r\n            if (this.isendpointedit) {\r\n                this.selitemune.splice(this.selitemune.findIndex(data => data === this.selNetworkEndpoint),1,this.ipAddrname) //(startnum, deletnum, 수정추가할값)\r\n                /////this.selitemune.findIndex(data => data === this.selNetworkEndpoint) select에서 내가 선택한 index\r\n            } else {\r\n                this.selitemune.push(this.ipAddrname)\r\n            }\r\n            this.selNetworkEndpoint = this.ipAddrname\r\n        },\r\n        listNetworkEndpoint (item, isConnector) {\r\n            this.dialogEndPointlist = true\r\n            if (isConnector == true) {\r\n                if (this.dialogNewConnector == false) {\r\n                    this.editedIndexCC = this.connector.indexOf(item)\r\n                }\r\n                if (this.editedIndexCC == -1 ) {\r\n                    this.selNetworkEndpoint = this.editedItemCC.une\r\n                }\r\n                else if (this.connector[this.editedIndexCC].une != '' ) {\r\n                    this.selNetworkEndpoint = this.connector[this.editedIndexCC].une\r\n                }\r\n                this.isSSDedit = false\r\n            } else {\r\n                if (this.dialogNewSSD == false) {\r\n                    this.editedIndexSSD = this.ssDiscovery.indexOf(item)\r\n                }\r\n                if (this.editedIndexSSD == -1 ) {\r\n                    this.selNetworkEndpoint = this.editedItemSSD.msia\r\n                }\r\n                else if (this.ssDiscovery[this.editedIndexSSD].msia != '' ) {\r\n                    this.selNetworkEndpoint = this.ssDiscovery[this.editedIndexSSD].msia\r\n                }\r\n                this.isSSDedit = true\r\n            }\r\n        },\r\n        editNetworkEndpoint () {\r\n            //text에 값넣어줘야한다.\r\n            if (this.selNetworkEndpoint != undefined) { //선택된값이 있을경우에만\r\n                this.dialogIPAddr =true\r\n                this.ipAddrname = this.selNetworkEndpoint\r\n                this.selNWendpointaddr = 'IPV-4-CONFIGURATION'\r\n                this.isendpointedit = true\r\n            }\r\n        },\r\n        newNetworkEndpoint () {\r\n            this.dialogIPAddr =true\r\n            this.ipAddrname = ''\r\n            this.selNWendpointaddr = undefined\r\n            this.isendpointedit = false\r\n        },\r\n        closeNetworkEndpoint () {\r\n            this.dialogEndPointlist = false\r\n            this.selNetworkEndpoint = '-1'\r\n        },\r\n        saveNetworkEndpoint () {\r\n            if (this.isSSDedit == false) {\r\n                if (this.selNetworkEndpoint != undefined) {\r\n                    if (this.editedIndexCC > -1) {\r\n                        this.connector[this.editedIndexCC].une = this.selNetworkEndpoint\r\n                    } \r\n                    if (this.dialogNewConnector == true) {\r\n                        this.editedItemCC.une = this.selNetworkEndpoint\r\n                    }\r\n                }  \r\n                this.dialogEndPointlist = false\r\n                this.$nextTick(() => {\r\n                    if (this.dialogNewConnector == false)\r\n                        this.editedIndexCC = -1\r\n                    this.selNetworkEndpoint = undefined\r\n                })\r\n            } else {\r\n                if (this.selNetworkEndpoint != undefined) {\r\n                    if (this.editedIndexSSD > -1) {\r\n                        this.ssDiscovery[this.editedIndexSSD].msia = this.selNetworkEndpoint\r\n                    } \r\n                    if (this.dialogNewSSD == true) {\r\n                        this.editedItemSSD.msia = this.selNetworkEndpoint\r\n                    }\r\n                }  \r\n                this.dialogEndPointlist = false\r\n                this.$nextTick(() => {\r\n                    if (this.dialogNewSSD == false)\r\n                        this.editedIndexSSD = -1\r\n                    this.selNetworkEndpoint = undefined\r\n                })\r\n            }\r\n        },\r\n        \r\n    },\r\n    computed: {\r\n        formCCTitle () {\r\n            return this.editedIndexCC === -1 ? 'New Communication-Connector' : 'Edit Communication-Connector'\r\n        },\r\n        formSSDTitle () {\r\n            return this.editedIndexSSD === -1 ? 'New SomeIP-Service-discovery' : 'Edit SomeIP-Service-discovery'\r\n        },\r\n        formEndpointTitle () {\r\n            return this.ipAddrname === '' ? 'New Item NETWORK-ENDPOINT' : 'Edit NETWORK-ENDPOINT'\r\n        }\r\n    },\r\n    watch: {\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n#machinedesign {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n</style>"]}]}