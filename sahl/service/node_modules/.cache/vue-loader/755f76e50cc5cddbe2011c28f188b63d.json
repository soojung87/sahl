{"remainingRequest":"D:\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\service\\src\\components\\UCMSoftwareCluster.vue?vue&type=template&id=8d344638&","dependencies":[{"path":"D:\\service\\src\\components\\UCMSoftwareCluster.vue","mtime":1662616145757},{"path":"D:\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}