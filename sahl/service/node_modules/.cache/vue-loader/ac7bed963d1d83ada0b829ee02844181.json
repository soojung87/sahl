{"remainingRequest":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\source\\service\\src\\components\\mainview.vue?vue&type=template&id=03c32e24&","dependencies":[{"path":"D:\\source\\service\\src\\components\\mainview.vue","mtime":1653617966517},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAiZHJhZ3Njcm9sbCIsCiAgICAgICAgICByYXdOYW1lOiAidi1kcmFnc2Nyb2xsIiwKICAgICAgICAgIHZhbHVlOiBfdm0uZHJhZywKICAgICAgICAgIGV4cHJlc3Npb246ICJkcmFnIgogICAgICAgIH0KICAgICAgXSwKICAgICAgY2xhc3M6IFsKICAgICAgICB7ICJncmFiLWJpbmciOiAidHJ1ZSIgfSwKICAgICAgICB7ICJtYWluLXZpZXciOiBfdm0ubWluaW1hcHRvb2xiYXIgfSwKICAgICAgICB7ICJtaW5pbWFwLXZpZXciOiAhX3ZtLm1pbmltYXB0b29sYmFyIH0KICAgICAgXSwKICAgICAgYXR0cnM6IHsgaWQ6ICJtYWluLXZpZXciICsgX3ZtLmxvY2F0aW9uIH0sCiAgICAgIG9uOiB7CiAgICAgICAgZHJhZ3Njcm9sbG1vdmU6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIF92bS5kcmFnQmFja2dyb3VuZCgpCiAgICAgICAgfSwKICAgICAgICBtb3VzZXdoZWVsOiBfdm0ub25tb3VzZVdoZWVsLAogICAgICAgIG1vdXNlZG93bjogX3ZtLm9ubW91c2VEb3duLAogICAgICAgIHNjcm9sbDogX3ZtLm9uU2Nyb2xsCiAgICAgIH0KICAgIH0sCiAgICBbCiAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAid3JhcHBlciIgfSB9KSwKICAgICAgX2MoCiAgICAgICAgInYtbWFpbiIsCiAgICAgICAgewogICAgICAgICAgc3R5bGU6IHsgdHJhbnNmb3JtOiAic2NhbGUoIiArIF92bS56b29tLnZhbHVlICsgIikiIH0sCiAgICAgICAgICBhdHRyczogeyBpZDogInNlYSIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLkRhdGFUeXBlcy5Db21wdU1ldGhvZCwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvbXB1IE1ldGhvZCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkNvbXB1TWV0aG9kIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLkRhdGFUeXBlcy5EYXRhQ29uc3RyLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiRGF0YSBDb25zdHIiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJEYXRhQ29uc3RyIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5EYXRhVHlwZXMKICAgICAgICAgICAgICAuQXBwbGljYXRpb25BcnJheURhdGFUeXBlLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiQXBwbGljYXRpb24gQXJyYXkiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJBcHBsaWNhdGlvbkFycmF5RGF0ZSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogX3ZtLm1pbmltYXB0b29sYmFyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uRGF0YVR5cGVzCiAgICAgICAgICAgICAgLkltcGxlbWVudGF0aW9uRGF0YVR5cGUsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJJbXBsZW1lbnRhdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkltcGxlbWVudGF0aW9uRGF0YVR5cGUiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLk1hY2hpbmUuTWFjaGluZSwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIk1hY2hpbmUiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJNYWNoaW5lIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5NYWNoaW5lLkhXRWxlbWVudCwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIkhXIEVsZW1lbnQiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJIV0VsZW1lbnQiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLk1hY2hpbmUuTWFjaGluZURlc2lnbiwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIk1hY2hpbmUgRGVzaWducyIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIk1hY2hpbmVEZXNpZ24iLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLk1hY2hpbmUuTW9kZURlY2xhcmF0aW9uR3JvdXAsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJNb2RlIERlY2xhcmF0aW9uIEdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiTW9kZURlY2xhcmF0aW9uR3JvdXAiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLk1hY2hpbmUuRXRoZXJuZXRDbHVzdGVyLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiRXRoZXJuZXQgQ2x1c3RlciIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkV0aGVybmV0Q2x1c3RlciIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIsCiAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogX3ZtLmxvY2F0aW9uCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uQWRhcHRpdmVBcHBsaWNhdGlvbgogICAgICAgICAgICAgIC5Qcm90b01hY2hpbmVNYXBwaW5nLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiUHJvY2VzcyB0byBNYWNoaW5lIE1hcHBpbmcgU2V0IgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiUHJvY2Vzc1RvTWFjaGluZSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5BZGFwdGl2ZUFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgLlNXQ29tcG9uZW50cywKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIlNXIENvbXBvbmVudHMiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJTV0NvbXBvbmVudHMiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgdmlld0luZm86IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogX3ZtLm1pbmltYXB0b29sYmFyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uQWRhcHRpdmVBcHBsaWNhdGlvbi5Qcm9jZXNzLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiUHJvY2VzcyIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlByb2Nlc3MiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgdmlld0luZm86IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogX3ZtLm1pbmltYXB0b29sYmFyLAogICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IF92bS5sb2NhdGlvbgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLkFkYXB0aXZlQXBwbGljYXRpb24KICAgICAgICAgICAgICAuUHJvY2Vzc0Rlc2lnbiwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIlByb2Nlc3MgRGVzaWduIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiUHJvY2Vzc0Rlc2lnbiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5BZGFwdGl2ZUFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgLkV4ZWN1dGFibGUsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJFeGVjdXRhYmxlIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiRXhlY3V0YWJsZSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5BZGFwdGl2ZUFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgLlN0YXJ0dXBDb25maWcsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJTdGFydHVwIENvbmZpZyIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlN0YXJ0dXBDb25maWciLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgdmlld0luZm86IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogX3ZtLm1pbmltYXB0b29sYmFyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uQWRhcHRpdmVBcHBsaWNhdGlvbgogICAgICAgICAgICAgIC5EZXRlcm1pbmlzdGljQ2xpZW50LAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiRGV0ZXJtaW5pc3RpYyBDbGllbnQiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJEZXRlcm1pbmlzdGljQ2xpZW50IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHZpZXdJbmZvOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLlNlcnZpY2UKICAgICAgICAgICAgICAuU29tZUlQU2VydmljZUludGVyZmFjZURlcGxveW1lbnQsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJTb21lSVAgU2VydmljZSBJbnRlcmZhY2UgRGVwbG95bWVudCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlNvbWVJUFNlcnZpY2UiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhciwKICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBfdm0ubG9jYXRpb24KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5TZXJ2aWNlLlNlcnZpY2VJbnRlcmZhY2UsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJTZXJ2aWNlIEludGVyZmFjZSIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlNlcnZpY2VJbnRlcmZhY2UiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhciwKICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBfdm0ubG9jYXRpb24KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5TZXJ2aWNlLlNvbWVJUENsaWVudEV2ZW50LAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiQ2xpZW50IgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiQ2xpZW50IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHZpZXdJbmZvOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLlNlcnZpY2UuU29tZUlQU2VydmVyRXZlbnQsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJTZXJ2ZXIiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJTZXJ2ZXIiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgdmlld0luZm86IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogX3ZtLm1pbmltYXB0b29sYmFyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uU2VydmljZQogICAgICAgICAgICAgIC5Tb21lSVBDbGllbnRTZXJ2aWNlSW5zdGFuY2UsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJTb21lSVAgQ2xpZW50IgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiU29tZUlQQ2xpZW50IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHZpZXdJbmZvOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLlNlcnZpY2UKICAgICAgICAgICAgICAuU29tZUlQU2VydmVyU2VydmljZUluc3RhbmNlLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiU29tZUlQIFNlcnZlciIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlNvbWVJUFNlcnZlciIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5TZXJ2aWNlCiAgICAgICAgICAgICAgLlNvbWVJUFNlcnZpY2VJbnN0YW5jZVRvTWFjaGluZSwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIlNvbWVJUCBUbyBNYWNoaW5lIE1hcHBpbmciCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJTb21lSVB0b01hY2hpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgdmlld0luZm86IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogX3ZtLm1pbmltYXB0b29sYmFyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uU2VydmljZQogICAgICAgICAgICAgIC5TZXJ2aWNlSW5zdGFuY2VUb1BvcnRQcm90b3R5cGUsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJUbyBQb3J0IFByb3RvdHlwZSBNYXBwaW5nIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiVG9Qb3J0UHJvdG90eXBlIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHZpZXdJbmZvOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9sKAogICAgICAgICAgICBfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLlNlcnZpY2UuUmVxdWlyZWRTb21lSVAsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAidnVlLWRyYWdnYWJsZS1yZXNpemFibGUiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBrZXk6IGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lLWFjdGl2ZSI6ICJteS1hY3RpdmUtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImJhc2ljLWZvcm0iLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgICB4OiBlbGVtZW50LmxlZnRbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB5OiBlbGVtZW50LnRvcFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgICBoOiAxMDAsCiAgICAgICAgICAgICAgICAgICAgejogZWxlbWVudC56aW5kZXgsCiAgICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogX3ZtLmlzRHJhZ2dhYmxlLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFsibXIiLCAibWwiXSwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25BY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkRlYWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25FbGVtZW50RHJhZygKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3AsCiAgICAgICAgICAgICAgICAgICAgICAgICJSZXF1aXJlZCBTb21lSVAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICByZXNpemluZzogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJSZXF1aXJlZFNvbWVJUCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIsCiAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogX3ZtLmxvY2F0aW9uCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX2woCiAgICAgICAgICAgIF92bS5TQUhMUHJvamVjdFtfdm0ub3BlblByb2plY3RJbmRleF0uU2VydmljZS5Qcm92aWRlZFNvbWVJUCwKICAgICAgICAgICAgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogZWxlbWVudC51dWlkLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiBlbGVtZW50LnV1aWQgKyBfdm0ubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUtYWN0aXZlIjogIm15LWFjdGl2ZS1jbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IF92bS56b29tLnZhbHVlLAogICAgICAgICAgICAgICAgICAgIHg6IGVsZW1lbnQubGVmdFtfdm0ubG9jYXRpb25dLAogICAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgdzogNDAwLAogICAgICAgICAgICAgICAgICAgIGg6IDEwMCwKICAgICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgICByZXNpemFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBfdm0uaXNEcmFnZ2FibGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAgICJtaW4td2lkdGgiOiA0MDAKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRGVhY3RpdmF0ZWQoZWxlbWVudC51dWlkKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZ1bmN0aW9uKGxlZnQsIHRvcCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkVsZW1lbnREcmFnKAogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCwKICAgICAgICAgICAgICAgICAgICAgICAgIlByb3ZpZGVkIFNvbWVJUCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2hhbmdlRWxlbWVudFNpemUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlByb3ZpZGVkU29tZUlQIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHZpZXdJbmZvOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IF92bS5taW5pbWFwdG9vbGJhciwKICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBfdm0ubG9jYXRpb24KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5TZXJ2aWNlLkVycm9yRG9tYWluLAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiRXJyb3IgRG9tYWluIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiQVBFcnJvckRvbWFpbiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbCgKICAgICAgICAgICAgX3ZtLlNBSExQcm9qZWN0W192bS5vcGVuUHJvamVjdEluZGV4XS5TZXJ2aWNlLkVycm9yU2V0LAogICAgICAgICAgICBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgInZ1ZS1kcmFnZ2FibGUtcmVzaXphYmxlIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQudXVpZCArIF92bS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJiYXNpYy1mb3JtIiwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogX3ZtLnpvb20udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgICAgeTogZWxlbWVudC50b3BbX3ZtLmxvY2F0aW9uXSwKICAgICAgICAgICAgICAgICAgICB3OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICAgIHo6IGVsZW1lbnQuemluZGV4LAogICAgICAgICAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbIm1yIiwgIm1sIl0sCiAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6IDQwMAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZzogZnVuY3Rpb24obGVmdCwgdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXVpZCwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wLAogICAgICAgICAgICAgICAgICAgICAgICAiRXJyb3IgU2V0IgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmc6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VFbGVtZW50U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiQVBFcnJvclNldCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbChfdm0uU0FITFByb2plY3RbX3ZtLm9wZW5Qcm9qZWN0SW5kZXhdLlNlcnZpY2UuRXJyb3IsIGZ1bmN0aW9uKAogICAgICAgICAgICBlbGVtZW50CiAgICAgICAgICApIHsKICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICJ2dWUtZHJhZ2dhYmxlLXJlc2l6YWJsZSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAga2V5OiBlbGVtZW50LnV1aWQsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC51dWlkICsgX3ZtLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZS1hY3RpdmUiOiAibXktYWN0aXZlLWNsYXNzIiwKICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYmFzaWMtZm9ybSIsCiAgICAgICAgICAgICAgICAgIHNjYWxlOiBfdm0uem9vbS52YWx1ZSwKICAgICAgICAgICAgICAgICAgeDogZWxlbWVudC5sZWZ0W192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgIHk6IGVsZW1lbnQudG9wW192bS5sb2NhdGlvbl0sCiAgICAgICAgICAgICAgICAgIHc6IDQwMCwKICAgICAgICAgICAgICAgICAgaDogMTAwLAogICAgICAgICAgICAgICAgICB6OiBlbGVtZW50LnppbmRleCwKICAgICAgICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IF92bS5pc0RyYWdnYWJsZSwKICAgICAgICAgICAgICAgICAgaGFuZGxlczogWyJtciIsICJtbCJdLAogICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogNDAwCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgYWN0aXZhdGVkOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQWN0aXZhdGVkKGVsZW1lbnQudXVpZCkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25EZWFjdGl2YXRlZChlbGVtZW50LnV1aWQpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmdW5jdGlvbihsZWZ0LCB0b3ApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uRWxlbWVudERyYWcoZWxlbWVudC51dWlkLCBsZWZ0LCB0b3AsICJFcnJvciIpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHJlc2l6aW5nOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUVsZW1lbnRTaXplKCkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIkFQRXJyb3IiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIHZpZXdJbmZvOiBudWxsLAogICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiBfdm0ubWluaW1hcHRvb2xiYXIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDIKICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}