{"remainingRequest":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\source\\service\\src\\components\\mainview.vue?vue&type=template&id=03c32e24&","dependencies":[{"path":"D:\\source\\service\\src\\components\\mainview.vue","mtime":1659674493674},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "dragscroll",
          rawName: "v-dragscroll",
          value: _vm.drag,
          expression: "drag"
        }
      ],
      class: [
        { "grab-bing": "true" },
        { "main-view": _vm.minimaptoolbar },
        { "minimap-view": !_vm.minimaptoolbar }
      ],
      attrs: { id: "main-view" + _vm.location },
      on: {
        dragscrollmove: function($event) {
          return _vm.dragBackground()
        },
        mousewheel: _vm.onmouseWheel,
        mousedown: _vm.onmouseDown,
        scroll: _vm.onScroll
      }
    },
    [
      _c("div", { attrs: { id: "wrapper" } }),
      _c(
        "v-main",
        {
          style: { transform: "scale(" + _vm.zoom.value + ")" },
          attrs: { id: "sea" }
        },
        [
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].DataTypes.CompuMethod,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Compu Method"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("CompuMethod", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._v(" "),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].DataTypes.DataConstr,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Data Constr"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("DataConstr", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].DataTypes.SWBaseType,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SW Base Type"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SWBaseType", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].DataTypes
              .ApplicationArrayDataType,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Application Array"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ApplicationArrayDate", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].DataTypes
              .ImplementationDataType,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Implementation"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ImplementationDataType", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Machine.Machine,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Machine"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("Machine", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Machine.HWElement,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "HW Element"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("HWElement", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Machine.HWCategory,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "HW Category"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("HWCategory", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Machine.MachineDesign,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Machine Designs"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("MachineDesign", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Machine.ModeDeclarationGroup,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Mode Declaration Group"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ModeDeclarationGroup", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Machine.EthernetCluster,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Ethernet Cluster"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("EthernetCluster", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      viewInfo: null,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication
              .ProtoMachineMapping,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Process to Machine Mapping Set"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ProcessToMachine", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication
              .SWComponents,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SW Components"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SWComponents", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication.Process,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Process"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("Process", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication
              .ProcessDesign,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Process Design"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ProcessDesign", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication
              .Executable,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Executable"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("Executable", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication
              .StartupConfig,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Startup Config Set"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("StartupConfig", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].AdaptiveApplication
              .DeterministicClient,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Deterministic Client"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("DeterministicClient", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service
              .SomeIPServiceInterfaceDeployment,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SomeIP Service Interface Deployment"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SomeIPService", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.ServiceInterface,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Service Interface"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ServiceInterface", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.SomeIPClientEvent,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Client"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("Client", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.SomeIPServerEvent,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Server"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("Server", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service
              .SomeIPClientServiceInstance,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SomeIP Client"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SomeIPClient", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service
              .SomeIPServerServiceInstance,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SomeIP Server"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SomeIPServer", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service
              .SomeIPServiceInstanceToMachine,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SomeIP To Machine Mapping"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SomeIPtoMachine", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service
              .ServiceInstanceToPortPrototype,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "To Port Prototype Mapping"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ToPortPrototype", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.RequiredSomeIP,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Required SomeIP"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("RequiredSomeIP", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.ProvidedSomeIP,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Provided SomeIP"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("ProvidedSomeIP", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.E2EProfileConfig,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "E2E Profile Configuration Set"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("E2EProfileConfig", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].Service.SdgDef, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(element.uuid, left, top, "SDG DEF")
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("SdgDef", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.ErrorDomain,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Error Domain"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("APErrorDomain", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Service.ErrorSet,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Error Set"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("APErrorSet", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].Service.Error, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(element.uuid, left, top, "Error")
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("APError", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Per.PERFileArray,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "File Array"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PerFileArray", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Per.PERFileProxy,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "File Proxy Interface"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PerFileProxy", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Per.PERKeyValueD,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "KeyV Database"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PerKeyValueDB", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar,
                      location: _vm.location
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Per.PERKeyValueDI,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "KeyV Database Interface"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PerKeyValueDI", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Per.PERPPtoFileArray,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "PP To File Array Mapping"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PPPtoFileArray", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Per.PERPPtoKeyValue,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "PP To Key Value Database Mapping"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PPPtoKeyValue", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Phm.PHMContribution,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Platform Health Management Contribution"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PHMContribution", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Phm.PHMtoMachine,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Contribution To Machine Mapping"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PHMtoMachine", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].Phm.PHMHealth, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Health Channel Interface"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("PHMHealthChannel", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar
                  }
                })
              ],
              1
            )
          }),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Phm.PHMRecovery,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Recovery Action Interface"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PHMRecovery", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Phm.PHMSupervised,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Supervised Enity Interface"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PHMSupervised", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].Phm.RecoveryVia,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Recovery VIA Application"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("PHMRecoveryVia", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].IamG.MethodGD, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Com Method Grant Design"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("MethodGrantD", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].IamG.EventGD, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Com Event Grant Design"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("EventGrantD", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].IamG.FieldGD, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Com Field Grant Design"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("FieldGrantD", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].IamG.MethodG, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Com Method Grant"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("MethodGrant", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].IamG.EventG, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Com Event Grant"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("EventGrant", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(_vm.SAHLProject[_vm.openProjectIndex].IamG.FieldG, function(
            element
          ) {
            return _c(
              "vue-draggable-resizable",
              {
                key: element.uuid,
                attrs: {
                  id: element.uuid + _vm.location,
                  "class-name-active": "my-active-class",
                  "class-name": "basic-form",
                  scale: _vm.zoom.value,
                  x: element.left[_vm.location],
                  y: element.top[_vm.location],
                  w: 400,
                  h: 100,
                  z: element.zindex,
                  resizable: true,
                  draggable: _vm.isDraggable,
                  handles: ["mr", "ml"],
                  "min-width": 400
                },
                on: {
                  activated: function($event) {
                    return _vm.onActivated(element.uuid)
                  },
                  deactivated: function($event) {
                    return _vm.onDeactivated(element.uuid)
                  },
                  dragging: function(left, top) {
                    return _vm.onElementDrag(
                      element.uuid,
                      left,
                      top,
                      "Com Field Grant"
                    )
                  },
                  resizing: function($event) {
                    return _vm.changeElementSize()
                  }
                }
              },
              [
                _c("FieldGrant", {
                  attrs: {
                    element: element,
                    isDatailView: false,
                    minimaptoolbar: _vm.minimaptoolbar,
                    location: _vm.location
                  }
                })
              ],
              1
            )
          }),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].UCM.SoftWareCluster,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SoftWare Cluster"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SoftwareCluster", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].UCM.SoftWarePackage,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "SoftWare Package"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("SoftwarePackage", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          ),
          _vm._l(
            _vm.SAHLProject[_vm.openProjectIndex].UCM.VehiclePackage,
            function(element) {
              return _c(
                "vue-draggable-resizable",
                {
                  key: element.uuid,
                  attrs: {
                    id: element.uuid + _vm.location,
                    "class-name-active": "my-active-class",
                    "class-name": "basic-form",
                    scale: _vm.zoom.value,
                    x: element.left[_vm.location],
                    y: element.top[_vm.location],
                    w: 400,
                    h: 100,
                    z: element.zindex,
                    resizable: true,
                    draggable: _vm.isDraggable,
                    handles: ["mr", "ml"],
                    "min-width": 400
                  },
                  on: {
                    activated: function($event) {
                      return _vm.onActivated(element.uuid)
                    },
                    deactivated: function($event) {
                      return _vm.onDeactivated(element.uuid)
                    },
                    dragging: function(left, top) {
                      return _vm.onElementDrag(
                        element.uuid,
                        left,
                        top,
                        "Vehicle Package"
                      )
                    },
                    resizing: function($event) {
                      return _vm.changeElementSize()
                    }
                  }
                },
                [
                  _c("VehiclePackage", {
                    attrs: {
                      element: element,
                      isDatailView: false,
                      minimaptoolbar: _vm.minimaptoolbar
                    }
                  })
                ],
                1
              )
            }
          )
        ],
        2
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}