{"remainingRequest":"C:\\Users\\soojung\\source\\Vue\\mainedit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\soojung\\source\\Vue\\mainedit\\src\\components\\mainview.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit\\src\\components\\mainview.vue","mtime":1625118164793},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\soojung\\source\\Vue\\mainedit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm15LWFjdGl2ZS1jbGFzcyB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmVkOw0KfQ0KDQouYmFzaWMtZm9ybSB7DQogICAgcG9zaXRpb246IGFic29sdXRlOyAvKiDsnbTqsowg7JeG7Jy866m0IGNvbXBvbmVudOuTpOydtCAgeCDsooztkZzsl5Ag6rCZ7J20IOyeiOyniCDrqrvtlaggIGjrp4ztgbwg65ao7Ja07KC47IScIOuwsOy5mOuQqCovDQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQo="},{"version":3,"sources":["mainview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"mainview.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <vue-draggable-resizable\r\n            class-name-active=\"my-active-class\"\r\n            class-name=\"basic-form\"\r\n            v-for=\"element in elements\"\r\n            :key=\"element.id\"\r\n            :x=\"element.x\"\r\n            :y=\"element.y\"\r\n            :w=\"400\"\r\n            :h=\"element.h\"\r\n            :resizable=\"false\"\r\n            :z=\"element.z\"\r\n            :active.sync=\"element.active\" \r\n            @activated=\"onActivated(element.id)\" @deactivated=\"onDeactivated(element.id)\"\r\n            @dragging=\"(left, top) => dragging(element.id, left, top)\"\r\n            @dragstop=\"(left, top) => dragstop(element.id, left, top)\" >\r\n            <component  :is=\"element.component\" ></component>\r\n        </vue-draggable-resizable>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport HWElement from '@/components/HWElement.vue'\r\nimport Machine from '@/components/Machine.vue'\r\nimport MachineDesign from '@/components/MachineDesign.vue'\r\nimport ModeDeclarationGroup from '@/components/ModeDeclarationGroup.vue'\r\nimport { EventBus } from '../main'\r\n\r\nexport default{\r\n    components:{ HWElement, Machine, MachineDesign, ModeDeclarationGroup},\r\n    data () {\r\n        return {\r\n            draggingId: null,\r\n            prevOffsetX: 0,\r\n            prevOffsetY: 0,\r\n            xPosition: 0,\r\n            yPosition: 0,\r\n            centerZ: 50,\r\n            elements: [\r\n                {id: 1, x: 600,  y: 80,  h: 750, z: 8,  active: false, component: 'Machine'}, // machine\r\n                {id: 2, x: 10,   y: 150, h: 450, z: 1,  active: false, component: 'MachineDesign'}, //machine design\r\n                {id: 3, x: 1200, y: 260, h: 250, z: 1,  active: false, component: 'HWElement'}, //HWelement\r\n                {id: 4, x: 1100, y: 550, h: 300, z: 1,  active: false, component: 'ModeDeclarationGroup'}, //Mode declaration Group\r\n            ]\r\n        }\r\n    },\r\n    mounted () {\r\n        EventBus.$on(\"call-component\", (element, x, y) => {\r\n            if(x > 700) {\r\n                this.xPosition = 650\r\n            } else {\r\n                this.xPosition = x\r\n            }\r\n            this.yPosition = y\r\n            this.positionchange(element)\r\n        })\r\n        EventBus.$on(\"open-modeDeclaration\", (item, id) => { //mode declaration 부를때 활성화창해주려고 이벤트 받았음\r\n            this.elements[id].active = true\r\n            this.elements[0].active = false\r\n        })\r\n        EventBus.$on(\"select-functionGrouptype\", (item, id) => { // mode declaratione에서 selecet했을 때 machine 활성화 해주려고 함\r\n            this.elements[0].active = true\r\n            this.elements[id].active = false\r\n            this.onDeactivated(id) // z값 변경하려고 \r\n        })\r\n    },\r\n    methods: {\r\n        dragging(id, left, top) {\r\n            this.draggingId = id;\r\n\r\n            if (! this.sync) return;\r\n\r\n            const offsetX = left - this.draggingElement.x;\r\n            const offsetY = top - this.draggingElement.y;\r\n\r\n            const deltaX = this.deltaX(offsetX);\r\n            const deltaY = this.deltaY(offsetY);\r\n\r\n            this.elements.map(el => {\r\n                if (el.id !== id) {\r\n                    el.x += deltaX;\r\n                    el.y += deltaY;\r\n                }\r\n                return el;\r\n            });\r\n        },\r\n        dragstop(id, left, top) {\r\n            this.elements.map(el => {\r\n                if (el.id === id) {\r\n                    el.x = left;\r\n                    el.y = top;\r\n                }\r\n                return el;\r\n            });\r\n\r\n            this.draggingId = null;\r\n            this.prevOffsetX = 0;\r\n            this.prevOffsetY = 0;\r\n        },\r\n        deltaX(offsetX) {\r\n            const ret = offsetX - this.prevOffsetX;\r\n\r\n            this.prevOffsetX = offsetX;\r\n\r\n            return ret;\r\n        },\r\n        deltaY(offsetY) {\r\n            const ret = offsetY - this.prevOffsetY;\r\n\r\n            this.prevOffsetY = offsetY;\r\n\r\n            return ret;\r\n        },\r\n        onActivated (id) {\r\n            if (id != 1) {\r\n                this.elements[id-1].z = 10\r\n            }\r\n        },\r\n        onDeactivated (id) {\r\n            if (this.elements[id-1].z != 1 &&  id != 1) {\r\n                this.elements[id-1].z = 1\r\n            }\r\n        },\r\n        positionchange (item) {\r\n            this.elements[item].x = this.xPosition\r\n            this.elements[item].y = this.yPosition\r\n            this.elements[item].z = this.centerZ\r\n            this.elements[item].active = true\r\n            this.elements[0].active = false\r\n\r\n            if (this.elements[0].x != 300) {\r\n                this.elements[0].x = 300\r\n                this.elements[0].y = 40\r\n            }\r\n\r\n            var getoutpointX = this.elements[item].x + 420 \r\n            for (var i in this.elements) { //0번째와 item은 pass 해야함\r\n\r\n                if (this.elements[i].x > 250 && this.elements[i].x < getoutpointX && i != item && i != 0) {\r\n                    var randomX \r\n                    var checknum = true\r\n                    do {\r\n                        randomX = Math.floor(Math.random() * 1301)\r\n                        if(randomX < 250 || randomX > 1020) {\r\n                            checknum = false\r\n                        }\r\n                    } while(checknum)\r\n\r\n                    this.elements[i].x = randomX\r\n                    this.elements[i].y = Math.floor(Math.random() * 651)\r\n                    if (this.elements[i].z == this.centerZ) {\r\n                        this.elements[i].z = 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n        draggingElement: function () {\r\n            if (! this.draggingId) return;\r\n\r\n            return this.elements.find(el => el.id === this.draggingId);\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n.my-active-class {\r\n    border: 1px solid red;\r\n}\r\n\r\n.basic-form {\r\n    position: absolute; /* 이게 없으면 component들이  x 좌표에 같이 있질 못함  h만큼 떨어져서 배치됨*/\r\n    background-color: white;\r\n}\r\n</style>"]}]}