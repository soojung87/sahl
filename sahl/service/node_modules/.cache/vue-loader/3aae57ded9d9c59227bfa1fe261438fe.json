{"remainingRequest":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\source\\service\\src\\components\\mainview.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\source\\service\\src\\components\\mainview.vue","mtime":1644803762802},{"path":"D:\\source\\service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\source\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCg0KI21haW4tdmlldyB7DQogICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgICBvdmVyZmxvdzogc2Nyb2xsOw0KICAgIGhlaWdodDogNzcwcHg7DQp9DQoNCi5iYXNpYy1mb3JtIHsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgcG9zaXRpb246IGFic29sdXRlOyAvKiDsnbTqsowg7JeG7Jy866m0IGNvbXBvbmVudOuTpOydtCAgeCDsooztkZzsl5Ag6rCZ7J20IOyeiOyniCDrqrvtlaggIGjrp4ztgbwg65ao7Ja07KC47IScIOuwsOy5mOuQqCovDQp9DQoudmlydHVhbC1kaWFncmFtew0KICAgIG9wYWNpdHk6IDAuNzsNCn0NCg0KI21haW4tdmlldzo6LXdlYmtpdC1zY3JvbGxiYXIgew0KICB3aWR0aDogNnB4Ow0KICBoZWlnaHQ6IDZweDsNCn0NCiNtYWluLXZpZXc6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7DQp9DQojbWFpbi12aWV3Ojotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7DQogIGJvcmRlci1yYWRpdXM6IDNweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogZ3JheTsNCn0NCiNtYWluLXZpZXc6Oi13ZWJraXQtc2Nyb2xsYmFyLWJ1dHRvbiB7DQogIHdpZHRoOiAwOw0KICBoZWlnaHQ6IDA7DQp9DQoNCmRpdiAvKiDthY3siqTtirjrpbwg66eI7Jqw7Iqk66GcIOuTnOuemOq3uO2VmOuKlCDqsoPsnYQg67Cp7KeA7ZWY64qUIENTUyAqLw0Kew0KICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7ICAvKuydteyKpO2UjOuhnOufrCAqLw0KICAtbW96LXVzZXItc2VsZWN0OiBub25lOyAvKu2MjOydtOyWtO2PreyKpCAqLw0KICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7IC8qKi8NCiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyrtgazroawsIOyCrO2MjOumrCAqLw0KICB1c2VyLXNlbGVjdDogbm9uZTsNCn0gDQoNCi5sZWFkZXItbGluZSB7DQogICB6LWluZGV4OiAwOyANCn0NCg0K"},{"version":3,"sources":["mainview.vue"],"names":[],"mappingsmuBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"mainview.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div id=\"main-view\" v-dragscroll=\"drag\" v-on:dragscrollmove=\"dragBackground()\" class=\"grab-bing\" \r\n        @mousewheel=\"onmouseWheel\" @mousedown=\"onmouseDown\">\r\n        <v-app v-bind:style=\"{ transform: 'scale(' + zoom.value + ')' }\" > \r\n            <vue-draggable-resizable \r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.CompuMethod\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onCompuMethodDrag(element.uuid, left, top)\">\r\n                <CompuMethod :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.DataConstr\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onDataConstrDrag(element.uuid, left, top)\">\r\n                <DataConstr :element='element' :isDatailView=\"false\"/>\r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.ApplicationArrayDataType\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onApplicationArrayDataTypeDrag(element.uuid, left, top)\">\r\n                <ApplicationArrayDate :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].DataTypes.ImplementationDataType\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onImplementationDataTypeDrag(element.uuid, left, top)\">\r\n                <ImplementationDataType :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.Machine\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onMachineDrag(element.uuid, left, top)\">\r\n                <Machine :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.HWElement\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onHWElementDrag(element.uuid, left, top)\">\r\n                <HWElement :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.MachineDesign\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onMachineDesignDrag(element.uuid, left, top)\">\r\n                <MachineDesign :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.ModeDeclarationGroup\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onModeDeclarationGroupDrag(element.uuid, left, top)\">\r\n                <ModeDeclarationGroup :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.EthernetCluster\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onEthernetClusterDrag(element.uuid, left, top)\">\r\n                <EthernetCluster :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Machine.HWCategory\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onHWCategoryDrag(element.uuid, left, top)\">\r\n                <HWCategory :element='element' :isDatailView=\"false\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.ProtoMachineMapping\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProtoMachineMappingDrag(element.uuid, left, top)\">\r\n                <ProcessToMachine :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.SWComponents\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSWComponentsDrag(element.uuid, left, top)\">\r\n                <SWComponents :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.Process\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProcessDrag(element.uuid, left, top)\">\r\n                <Process :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.ProcessDesign\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProcessDesignDrag(element.uuid, left, top)\">\r\n                <ProcessDesign :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.Executable\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onExecutableDrag(element.uuid, left, top)\">\r\n                <Executable :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.StartupConfig\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onStartupConfigDrag(element.uuid, left, top)\">\r\n                <StartupConfig :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].AdaptiveApplication.DeterministicClient\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onDeterministicClientDrag(element.uuid, left, top)\">\r\n                <DeterministicClient :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServiceInterfaceDeployment\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPServiceDrag(element.uuid, left, top)\">\r\n                <SomeIPService :element='element' :isDatailView=\"false\"/>  <!-- :drag-handle=\"'.drag-handle'\" -->\r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ServiceInterface\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onServiceInterfaceDrag(element.uuid, left, top)\">\r\n                <ServiceInterface :element='element' :isDatailView=\"false\"/>  <!-- :drag-handle=\"'.drag-handle'\" -->\r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPClientEvent\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onClientDrag(element.uuid, left, top)\">\r\n                <Client :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServerEvent\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onServerDrag(element.uuid, left, top)\">\r\n                <Server :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPClientServiceInstance\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPClientDrag(element.uuid, left, top)\">\r\n                <SomeIPClient :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServerServiceInstance\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPServerDrag(element.uuid, left, top)\">\r\n                <SomeIPServer :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable><vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.SomeIPServiceInstanceToMachine\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onSomeIPtoMachineDrag(element.uuid, left, top)\">\r\n                <SomeIPtoMachine :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ServiceInstanceToPortPrototype\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onToPortPrototypeDrag(element.uuid, left, top)\">\r\n                <ToPortPrototype :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.RequiredSomeIP\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onRequiredSomeIPDrag(element.uuid, left, top)\">\r\n                <RequiredSomeIP :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ProvidedSomeIP\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onProvidedSomeIPDrag(element.uuid, left, top)\">\r\n                <ProvidedSomeIP :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ErrorDomain\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onErrorDomainDrag(element.uuid, left, top)\">\r\n                <APErrorDomain :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.ErrorSet\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onErrorSetDrag(element.uuid, left, top)\">\r\n                <APErrorSet :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n            <vue-draggable-resizable\r\n                class-name-active=\"my-active-class\"\r\n                class-name=\"basic-form\" :scale=\"zoom.value\"\r\n                v-for=\"element in SAHLProject[openProjectIndex].Service.Error\"\r\n                :key=\"element.uuid\"\r\n                :x=\"element.left\" :y=\"element.top\" :w=400 :h=100 :z='element.zindex'\r\n                :resizable=\"true\" :draggable=\"true\"\r\n                :handles=\"['mr','ml']\" :min-width=\"400\"\r\n                @activated=\"onActivated(element.uuid)\" @deactivated=\"onDeactivated(element.uuid)\"\r\n                @dragging=\"(left, top) => onErrorDrag(element.uuid, left, top)\">\r\n                <APError :element='element' :isDatailView=\"false\" :viewInfo=\"null\"/> \r\n            </vue-draggable-resizable>\r\n\r\n\r\n        </v-app>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport ServiceInterface from './serviceInterface.vue'\r\nimport CompuMethod from './compumethod.vue'\r\nimport DataConstr from './dataconstr.vue'\r\nimport ApplicationArrayDate from './applicationArrayData.vue'\r\nimport ImplementationDataType from './implementationData.vue'\r\nimport Machine from '../components/Machine.vue'\r\nimport HWElement from '../components/HWElement.vue'\r\nimport ModeDeclarationGroup from '../components/ModeDeclarationGroup.vue'\r\nimport MachineDesign from '../components/MachineDesign.vue'\r\nimport EthernetCluster from '../components/EthernetCluster.vue'\r\nimport DeterministicClient from '../components/DeterministicClient.vue'\r\nimport Executable from '../components/Executable.vue'\r\nimport Process from '../components/Process.vue'\r\nimport ProcessDesign from '../components/ProcessDesign.vue'\r\nimport ProcessToMachine from '../components/ProcessToMachine.vue'\r\nimport StartupConfig from '../components/StartupConfig.vue'\r\nimport SWComponents from '../components/SWComponents.vue'\r\nimport APErrorDomain from '../components/APErrorDomain.vue'\r\nimport APErrorSet from '../components/APErrorSet.vue'\r\nimport APError from '../components/APError.vue'\r\nimport Client from '../components/ClientEventG.vue'\r\nimport Server from '../components/Server.vue'\r\nimport SomeIPClient from '../components/SomeIPClient.vue'\r\nimport SomeIPServer from '../components/SomeIPServer.vue'\r\nimport SomeIPtoMachine from '../components/SomeIPtoMachineMapping.vue'\r\nimport SomeIPService from '../components/SomeIPService.vue'\r\nimport ToPortPrototype from '../components/ToPortPrototype.vue'\r\nimport RequiredSomeIP from '../components/RequiredSomeIP.vue'\r\nimport ProvidedSomeIP from '../components/ProvidedSomeIP.vue'\r\nimport HWCategory from '../components/HWCategory.vue'\r\n\r\nimport { EventBus } from '../main'\r\nimport LeaderLine from 'leader-line-vue'\r\n\r\n\r\nexport default{\r\n    components:{CompuMethod, DataConstr, ApplicationArrayDate, ImplementationDataType, \r\n                SomeIPService, ServiceInterface, Client, Server,\r\n                SomeIPClient, SomeIPServer, SomeIPtoMachine, ToPortPrototype, RequiredSomeIP, ProvidedSomeIP,\r\n                APErrorDomain, APErrorSet, APError,\r\n                Machine, HWElement, ModeDeclarationGroup, MachineDesign, EthernetCluster, HWCategory,\r\n                DeterministicClient, Executable, Process, ProcessDesign, ProcessToMachine, StartupConfig, SWComponents},\r\n    computed: {\r\n        SAHLProject() {\r\n            return this.$store.state.SAHLProject\r\n        },\r\n        openProjectIndex() {\r\n            return this.$store.state.openProjectIndex\r\n        },\r\n        navigatorList() {\r\n            return this.$store.state.navigatorList\r\n        },\r\n        connectionLine() {\r\n            return this.$store.state.connectionLine\r\n        },\r\n        activeUUID() {\r\n            return this.$store.state.activeUUID\r\n        },\r\n        setting() {\r\n            return this.$store.state.setting\r\n        },\r\n        isInputFileComplate() {\r\n            return this.$store.state.isInputFileComplate\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            zoom: {\r\n                min: 0.2,\r\n                max: 2,\r\n                value: this.$store.state.setting.zoomMain,\r\n                step: 0.1,\r\n                originX: 0,\r\n                originY: 0\r\n            },\r\n            drag: true, //true: 배경 움직임, false: diagram움직임\r\n            connections: [],\r\n            sync: false,\r\n            // speed: 0.5,\r\n            //pos: { x: 0, y: 0 },\r\n            //target: { x: 0, y: 0 },\r\n            //pointer: { x: 0, y: 0 },\r\n            // scale: 1,\r\n\r\n        }\r\n    },\r\n    watch: {\r\n        setting(value) {\r\n            this.zoom.value = value.zoomMain\r\n        },\r\n        isInputFileComplate(value) {\r\n             //Input file한뒤에 그림이 그려지기 전에 선을 그리려고 하니 에러 \r\n            if (value) {\r\n                this.$nextTick(() => {\r\n                    console.log('updata')\r\n                    this.$store.commit('checkLineInputXml')\r\n                    this.$store.commit('setInputFileComplate')\r\n                })\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        window.addEventListener('keydown', ev => {\r\n            if (ev.keyCode === 17) {\r\n                this.sync = true;\r\n            }\r\n        })\r\n        window.addEventListener('keyup', ev => {\r\n            if (ev.keyCode === 17) {\r\n                this.sync = false;\r\n            }\r\n        })\r\n        EventBus.$on('new-line', (startdiagram, enddiagram) => {\r\n            //console.log('new-line '+ startdiagram + '=='+ enddiagram)\r\n            this.addLine(startdiagram, enddiagram)\r\n            this.$nextTick(() => { // 다 그려진뒤에 move해줘야지 그려지기전에 하게되면 선이 이상한 곳에 가서 그려져있음\r\n                this.moveline()\r\n            })\r\n        });\r\n        EventBus.$on('delete-line', (numLine) => {\r\n            //console.log('delete-line'+ numLine)\r\n            this.connections[numLine].remove()\r\n            this.connections.splice(numLine, 1)\r\n        });\r\n        EventBus.$on('onActivated', (uuid) => {\r\n            this.onActivated(uuid)\r\n        })\r\n        EventBus.$on('onDeactivated', (uuid) => {\r\n            this.onDeactivated(uuid)\r\n        })\r\n    },\r\n    methods: {\r\n        onActivated(uuid) {\r\n            //console.log('onActivated'+uuid)\r\n            this.isMouseDiagram = true\r\n            this.$store.commit('setuuid', {uuid: uuid} )\r\n            this.setZindex(uuid, 10)\r\n            EventBus.$emit('active-element', uuid)\r\n            this.drag = false\r\n            this.setanimationLine(uuid, true)\r\n        },\r\n        onDeactivated(uuid) {\r\n            //console.log('onDeactivated'+ uuid)\r\n            this.setanimationLine(uuid, false)\r\n            this.isMouseDiagram = false\r\n            this.$store.commit('setuuid', { uuid: null} )\r\n            EventBus.$emit('active-element', null)\r\n            this.setZindex(uuid, 2)\r\n            this.drag = true\r\n        },\r\n        setZindex(uuid, zidx){\r\n            var treeitem = Object.values(this.$store.getters.gettreeviewitems)\r\n            var arrelement = treeitem.find(data =>  data.uuid === uuid)\r\n            //console.log('setZindex'+ arrelement.parent)\r\n            this.$store.commit('setzIndex', {parent: arrelement.parent, uuid: uuid, zindex: zidx} )\r\n        },\r\n        onCompuMethodDrag(uuid, left, top){\r\n            this.$store.commit('editCompuMehtod', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onDataConstrDrag(uuid, left, top){\r\n            this.$store.commit('editDataConstr', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onApplicationArrayDataTypeDrag(uuid, left, top){\r\n            this.$store.commit('editApplicationArray', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onImplementationDataTypeDrag(uuid, left, top) {\r\n            this.$store.commit('editImplementation', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onMachineDrag(uuid, left, top){\r\n            this.$store.commit('editMachine', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onHWElementDrag(uuid, left, top){\r\n            this.$store.commit('editHWElement', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onHWCategoryDrag(uuid, left, top){\r\n            this.$store.commit('editHWCategory', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onMachineDesignDrag(uuid, left, top){\r\n            this.$store.commit('editMachineDesign', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onModeDeclarationGroupDrag(uuid, left, top){\r\n            this.$store.commit('editModeDeclarationGroup', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onEthernetClusterDrag(uuid, left, top){\r\n            this.$store.commit('editEthernetCluster', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProtoMachineMappingDrag(uuid, left, top){\r\n            this.$store.commit('editProtoMachineMapping', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSWComponentsDrag(uuid, left, top){\r\n            this.$store.commit('editSWComponents', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProcessDrag(uuid, left, top){\r\n            this.$store.commit('editProcess', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProcessDesignDrag(uuid, left, top){\r\n            this.$store.commit('editProcessDesign', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onExecutableDrag(uuid, left, top){\r\n            this.$store.commit('editExecutable', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onStartupConfigDrag(uuid, left, top){\r\n            this.$store.commit('editStartupConfig', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onDeterministicClientDrag(uuid, left, top){\r\n            this.$store.commit('editDeterministicClien', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPServiceDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPService', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onServiceInterfaceDrag(uuid, left, top){\r\n            this.$store.commit('editServiceInterface', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onClientDrag(uuid, left, top){\r\n            this.$store.commit('editClient', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onServerDrag(uuid, left, top){\r\n            this.$store.commit('editServer', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPClientDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPClient', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPServerDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPServer', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onSomeIPtoMachineDrag(uuid, left, top){\r\n            this.$store.commit('editSomeIPtoMachine', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onToPortPrototypeDrag(uuid, left, top){\r\n            this.$store.commit('editToPortPrototype', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onRequiredSomeIPDrag(uuid, left, top){\r\n            this.$store.commit('editRequiredSomeIP', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onProvidedSomeIPDrag(uuid, left, top){\r\n            this.$store.commit('editProvidedSomeIP', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onErrorDomainDrag(uuid, left, top){\r\n            this.$store.commit('editErrorDomain', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onErrorSetDrag(uuid, left, top){\r\n            this.$store.commit('editErrorSet', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n        onErrorDrag(uuid, left, top){\r\n            this.$store.commit('editError', {compo:\"drag\", uuid: uuid, top: top, left: left} )\r\n            this.moveline()\r\n        },\r\n\r\n        moveline() {\r\n            this.connections.forEach((connection) => connection.position());\r\n         },\r\n        addLine(start, end) {\r\n            this.connections.push (\r\n                LeaderLine.setLine(document.getElementById(start),  document.getElementById(end), {\r\n                            startPlug: 'disc',\r\n                            endPlug: 'arrow1',\r\n                            startSocket: 'auto',\r\n                            endSocket: 'auto',\r\n                            endPlugSize: 2,\r\n                            color: 'rgba(253, 105, 68, 0.4)',\r\n                            size: 1,\r\n            }))\r\n        },\r\n        setanimationLine(uuid, isactive) {\r\n            var activeLine = this.$store.getters.getactiveLine(uuid)\r\n            for (let i=0; i< activeLine.length;i++) {\r\n                if (isactive) {\r\n                    //this.connections[activeLine[i]].dash = {animation: isactive, len: 8, gap: 13}\r\n                    this.connections[activeLine[i]].size = 3\r\n                    this.connections[activeLine[i]].color = 'rgba(253, 105, 68, 1)'\r\n                } else {\r\n                    //this.connections[activeLine[i]].dash = false\r\n                    this.connections[activeLine[i]].size = 1\r\n                    this.connections[activeLine[i]].color = 'rgba(253, 105, 68, 0.4)'\r\n                }\r\n            }\r\n        },\r\n        dragBackground() {\r\n            this.moveline()\r\n        },\r\n\r\n        onmouseDown() { //edit dialog했을경우 임의로 activeuuid 값을 넣어줬기 때문에 배경을 누르면 toolbar색이 변하지 않는 이슈\r\n            if ((this.isMouseDiagram == false || this.isMouseDiagram == undefined) && this.drag == true) {\r\n                if (this.$store.state.activeUUID != null) {\r\n                    var treeitem = Object.values(this.$store.getters.gettreeviewitems)\r\n                    var arrelement = treeitem.find(data =>  data.uuid === this.$store.state.activeUUID)\r\n                    // 기존에 setuuid에 가지고 있던 값 z값 낮춰줘야한다.\r\n                    this.$store.commit('setzIndex', {parent:arrelement.parent, uuid: this.$store.state.activeUUID, zindex: 2} )\r\n                    this.$store.commit('setuuid', {uuid: null} )\r\n                }\r\n            }\r\n        },\r\n        onmouseWheel(ev) {\r\n            if (! this.sync) {\r\n                this.moveline()\r\n                return\r\n            }\r\n\r\n            ev.preventDefault();\r\n            // let container = document.getElementById(\"mainscreen\");\r\n            // let editorView = container.querySelector(\"main-view\");\r\n\r\n            if (ev.deltaY < 0) {\r\n                this.zoom.value = this.zoom.value >= this.zoom.max ? this.zoom.max : this.zoom.value + this.zoom.step;\r\n                \r\n            } else  if (ev.deltaY > 0) {\r\n                this.zoom.value = this.zoom.value <= this.zoom.min ? this.zoom.min : this.zoom.value - this.zoom.step;\r\n            }\r\n\r\n            // editorView.style.transform = `matrix(${this.zoom.value}, 0, 0, ${this.zoom.value}, ${this.zoom.originX}, ${this.zoom.originY})`;\r\n            // let rect = editorView.getBoundingClientRect();\r\n\r\n            // let ew = rect.width;\r\n            // let eh = rect.height;\r\n\r\n            // let mx = ev.x - container.offsetLeft;\r\n            // let my = ev.y - container.offsetTop;\r\n\r\n            // container.scroll((ew - container.offsetWidth) * (mx / container.clientWidth), (eh - container.offsetHeight) * (my / container.clientHeight));\r\n            this.moveline()\r\n            \r\n            // ev.preventDefault();\r\n            // this.pointer.x = event.pageX - this.container.offsetLeft\r\n            // this.pointer.y = event.pageY - this.container.offsetTop\r\n            // this.target.x = (this.pointer.x - this.pos.x) / this.scale\r\n            // this.target.y = (this.pointer.y - this.pos.y) / this.scale\r\n            \r\n            // this.scale += -1 * Math.max(-1, Math.min(1, event.deltaY)) * this.speed * this.scale\r\n            // this.pos.x = -this.target.x * this.scale + this.pointer.x\r\n            // this.pos.y = -this.target.y * this.scale + this.pointer.y\r\n            // this.image.style.transform = `translate(${this.pos.x}px,${this.pos.y}px) scale(${this.scale},${this.scale})`\r\n\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n#main-view {\r\n    white-space: nowrap;\r\n    overflow: scroll;\r\n    height: 770px;\r\n}\r\n\r\n.basic-form {\r\n    cursor: pointer;\r\n    position: absolute; /* 이게 없으면 component들이  x 좌표에 같이 있질 못함  h만큼 떨어져서 배치됨*/\r\n}\r\n.virtual-diagram{\r\n    opacity: 0.7;\r\n}\r\n\r\n#main-view::-webkit-scrollbar {\r\n  width: 6px;\r\n  height: 6px;\r\n}\r\n#main-view::-webkit-scrollbar-track {\r\n  background-color: transparent;\r\n}\r\n#main-view::-webkit-scrollbar-thumb {\r\n  border-radius: 3px;\r\n  background-color: gray;\r\n}\r\n#main-view::-webkit-scrollbar-button {\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\ndiv /* 텍스트를 마우스로 드래그하는 것을 방지하는 CSS */\r\n{\r\n  -ms-user-select: none;  /*익스플로러 */\r\n  -moz-user-select: none; /*파이어폭스 */\r\n  -khtml-user-select: none; /**/\r\n  -webkit-user-select: none; /*크롬, 사파리 */\r\n  user-select: none;\r\n} \r\n\r\n.leader-line {\r\n   z-index: 0; \r\n}\r\n\r\n</style>"]}]}