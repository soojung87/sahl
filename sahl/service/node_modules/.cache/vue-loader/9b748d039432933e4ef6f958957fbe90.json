{"remainingRequest":"D:\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\service\\src\\components\\mainview.vue?vue&type=template&id=fc53d13c&","dependencies":[{"path":"D:\\service\\src\\components\\mainview.vue","mtime":1664934986284},{"path":"D:\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<div :id="'main-view'+location"  v-dragscroll="drag" v-on:dragscrollmove="dragBackground()" v-bind:class="[{'grab-bing':'true'},{'main-view':minimaptoolbar},{'minimap-view':!minimaptoolbar}]"
    @mousewheel="onmouseWheel" @mousedown="onmouseDown" @mouseup="onmouseUp" @scroll="onScroll">
    <div id="wrapper"></div>
    <v-main id="sea" v-bind:style="{ transform: 'scale(' + zoom.value + ')' }" ><!--<v-app>에서 바꿈 : v-app으로 하면 뭔가 안에 창이 하나 더생겨서 화면이 늘어나 scroll이 생긴다.-->
        <div v-for="element in SAHLProject[openProjectIndex].DataTypes.CompuMethod"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form" 
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Compu Method')" @deactivated="onDeactivated(element.uuid, 'Compu Method')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Compu Method')"
                @resizing="changeElementSize()">
                <CompuMethod  :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable> <!-- 화면 분할하면 창마다 scroll이 움직이지 않기 때문에 id값을 바꿔줘야한다-->
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].DataTypes.DataConstr"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form" 
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Data Constr')" @deactivated="onDeactivated(element.uuid, 'Data Constr')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Data Constr')"
                @resizing="changeElementSize()">
                <DataConstr  :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable> <!-- 화면 분할하면 창마다 scroll이 움직이지 않기 때문에 id값을 바꿔줘야한다-->
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].DataTypes.SWBaseType"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SW Base Type')" @deactivated="onDeactivated(element.uuid, 'SW Base Type')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SW Base Type')"
                @resizing="changeElementSize()">
                <SWBaseType :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/>
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].DataTypes.ApplicationArrayDataType"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Application Array')" @deactivated="onDeactivated(element.uuid, 'Application Array')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Application Array')"
                @resizing="changeElementSize()">
                <ApplicationArrayDate :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].DataTypes.ImplementationDataType"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form" 
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Implementation')" @deactivated="onDeactivated(element.uuid, 'Implementation')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Implementation')"
                @resizing="changeElementSize()">
                <ImplementationDataType :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Machine.Machine"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form" 
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Machine')" @deactivated="onDeactivated(element.uuid, 'Machine')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Machine')"
                @resizing="changeElementSize()">
                <Machine :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Machine.HWElement"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'HW Element')" @deactivated="onDeactivated(element.uuid, 'HW Element')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'HW Element')"
                @resizing="changeElementSize()">
                <HWElement  :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Machine.HWCategory"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'HW Category')" @deactivated="onDeactivated(element.uuid, 'HW Category')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'HW Category')"
                @resizing="changeElementSize()">
                <HWCategory  :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Machine.MachineDesign"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible"  :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Machine Designs')" @deactivated="onDeactivated(element.uuid, 'Machine Designs')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Machine Designs')"
                @resizing="changeElementSize()">
                <MachineDesign :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Machine.ModeDeclarationGroup"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Mode Declaration Group')" @deactivated="onDeactivated(element.uuid, 'Mode Declaration Group')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Mode Declaration Group')"
                @resizing="changeElementSize()">
                <ModeDeclarationGroup :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Machine.EthernetCluster"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Ethernet Cluster')" @deactivated="onDeactivated(element.uuid, 'Ethernet Cluster')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Ethernet Cluster')"
                @resizing="changeElementSize()">
                <EthernetCluster :element='element' :isDatailView="false" :viewInfo="null" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.ProtoMachineMapping"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Process to Machine Mapping Set')" @deactivated="onDeactivated(element.uuid, 'Process to Machine Mapping Set')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Process to Machine Mapping Set')"
                @resizing="changeElementSize()">
                <ProcessToMachine :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.SWComponents"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SW Components')" @deactivated="onDeactivated(element.uuid, 'SW Components')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SW Components')"
                @resizing="changeElementSize()">
                <SWComponents :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.Process"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Process')" @deactivated="onDeactivated(element.uuid, 'Process')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Process')"
                @resizing="changeElementSize()">
                <Process :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.ProcessDesign"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Process Design')" @deactivated="onDeactivated(element.uuid, 'Process Design')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Process Design')"
                @resizing="changeElementSize()">
                <ProcessDesign :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.Executable"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Executable')" @deactivated="onDeactivated(element.uuid, 'Executable')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Executable')"
                @resizing="changeElementSize()">
                <Executable :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.StartupConfig"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Startup Config Set')" @deactivated="onDeactivated(element.uuid, 'Startup Config Set')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Startup Config Set')"
                @resizing="changeElementSize()">
                <StartupConfig :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].AdaptiveApplication.DeterministicClient"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Deterministic Client')" @deactivated="onDeactivated(element.uuid, 'Deterministic Client')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Deterministic Client')"
                @resizing="changeElementSize()">
                <DeterministicClient :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SomeIPServiceInterfaceDeployment"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SomeIP Service Interface Deployment')" @deactivated="onDeactivated(element.uuid, 'SomeIP Service Interface Deployment')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SomeIP Service Interface Deployment')"
                @resizing="changeElementSize()">
                <SomeIPService :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/>  <!-- :drag-handle="'.drag-handle'" -->
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.ServiceInterface"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Service Interface')" @deactivated="onDeactivated(element.uuid, 'Service Interface')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Service Interface')"
                @resizing="changeElementSize()">
                <ServiceInterface :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/>  <!-- :drag-handle="'.drag-handle'" -->
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SomeIPClientEvent"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Client')" @deactivated="onDeactivated(element.uuid, 'Client')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Client')"
                @resizing="changeElementSize()">
                <Client :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SomeIPServerEvent"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Server')" @deactivated="onDeactivated(element.uuid, 'Server')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Server')"
                @resizing="changeElementSize()">
                <Server :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SomeIPClientServiceInstance"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SomeIP Client')" @deactivated="onDeactivated(element.uuid, 'SomeIP Client')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SomeIP Client')"
                @resizing="changeElementSize()">
                <SomeIPClient :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SomeIPServerServiceInstance"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SomeIP Server')" @deactivated="onDeactivated(element.uuid, 'SomeIP Server')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SomeIP Server')"
                @resizing="changeElementSize()">
                <SomeIPServer :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SomeIPServiceInstanceToMachine"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SomeIP To Machine Mapping')" @deactivated="onDeactivated(element.uuid, 'SomeIP To Machine Mapping')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SomeIP To Machine Mapping')"
                @resizing="changeElementSize()">
                <SomeIPtoMachine :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.ServiceInstanceToPortPrototype"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'To Port Prototype Mapping')" @deactivated="onDeactivated(element.uuid, 'To Port Prototype Mapping')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'To Port Prototype Mapping')"
                @resizing="changeElementSize()">
                <ToPortPrototype :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.RequiredSomeIP"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Required SomeIP')" @deactivated="onDeactivated(element.uuid, 'Required SomeIP')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Required SomeIP')"
                @resizing="changeElementSize()">
                <RequiredSomeIP :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.ProvidedSomeIP"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Provided SomeIP')" @deactivated="onDeactivated(element.uuid, 'Provided SomeIP')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Provided SomeIP')"
                @resizing="changeElementSize()">
                <ProvidedSomeIP :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.E2EProfileConfig"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'E2E Profile Configuration Set')" @deactivated="onDeactivated(element.uuid, 'E2E Profile Configuration Set')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'E2E Profile Configuration Set')"
                @resizing="changeElementSize()">
                <E2EProfileConfig :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.SdgDef"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SDG DEF')" @deactivated="onDeactivated(element.uuid, 'SDG DEF')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SDG DEF')"
                @resizing="changeElementSize()">
                <SdgDef :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.ErrorDomain"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Error Domain')" @deactivated="onDeactivated(element.uuid, 'Error Domain')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Error Domain')"
                @resizing="changeElementSize()">
                <APErrorDomain :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.ErrorSet"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Error Set')" @deactivated="onDeactivated(element.uuid, 'Error Set')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Error Set')"
                @resizing="changeElementSize()">
                <APErrorSet :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Service.Error"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Error')" @deactivated="onDeactivated(element.uuid, 'Error')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Error')"
                @resizing="changeElementSize()">
                <APError :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Per.PERFileArray"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'File Array')" @deactivated="onDeactivated(element.uuid, 'File Array')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'File Array')"
                @resizing="changeElementSize()">
                <PerFileArray :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Per.PERFileProxy"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'File Proxy Interface')" @deactivated="onDeactivated(element.uuid, 'File Proxy Interface')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'File Proxy Interface')"
                @resizing="changeElementSize()">
                <PerFileProxy :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Per.PERKeyValueD"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'KeyV Database')" @deactivated="onDeactivated(element.uuid, 'KeyV Database')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'KeyV Database')"
                @resizing="changeElementSize()">
                <PerKeyValueDB :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Per.PERKeyValueDI"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'KeyV Database Interface')" @deactivated="onDeactivated(element.uuid, 'KeyV Database Interface')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'KeyV Database Interface')"
                @resizing="changeElementSize()">
                <PerKeyValueDI :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Per.PERPPtoFileArray"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'PP To File Array Mapping')" @deactivated="onDeactivated(element.uuid, 'PP To File Array Mapping')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'PP To File Array Mapping')"
                @resizing="changeElementSize()">
                <PPPtoFileArray :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Per.PERPPtoKeyValue"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'PP To Key Value Database Mapping')" @deactivated="onDeactivated(element.uuid, 'PP To Key Value Database Mapping')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'PP To Key Value Database Mapping')"
                @resizing="changeElementSize()">
                <PPPtoKeyValue :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Phm.PHMContribution"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Platform Health Management Contribution')" @deactivated="onDeactivated(element.uuid, 'Platform Health Management Contribution')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Platform Health Management Contribution')"
                @resizing="changeElementSize()">
                <PHMContribution :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Phm.PHMtoMachine"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Contribution To Machine Mapping')" @deactivated="onDeactivated(element.uuid, 'Contribution To Machine Mapping')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Contribution To Machine Mapping')"
                @resizing="changeElementSize()">
                <PHMtoMachine :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Phm.PHMHealth"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Health Channel Interface')" @deactivated="onDeactivated(element.uuid, 'Health Channel Interface')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Health Channel Interface')"
                @resizing="changeElementSize()">
                <PHMHealthChannel :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Phm.PHMRecovery"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Recovery Action Interface')" @deactivated="onDeactivated(element.uuid, 'Recovery Action Interface')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Recovery Action Interface')"
                @resizing="changeElementSize()">
                <PHMRecovery :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Phm.PHMSupervised"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Supervised Enity Interface')" @deactivated="onDeactivated(element.uuid, 'Supervised Enity Interface')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Supervised Enity Interface')"
                @resizing="changeElementSize()">
                <PHMSupervised :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].Phm.RecoveryVia"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Recovery VIA Application')" @deactivated="onDeactivated(element.uuid, 'Recovery VIA Application')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Recovery VIA Application')"
                @resizing="changeElementSize()">
                <PHMRecoveryVia :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].IamG.MethodGD"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Com Method Grant Design')" @deactivated="onDeactivated(element.uuid, 'Com Method Grant Design')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Com Method Grant Design')"
                @resizing="changeElementSize()">
                <MethodGrantD :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].IamG.EventGD"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Com Event Grant Design')" @deactivated="onDeactivated(element.uuid, 'Com Event Grant Design')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Com Event Grant Design')"
                @resizing="changeElementSize()">
                <EventGrantD :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].IamG.FieldGD"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Com Field Grant Design')" @deactivated="onDeactivated(element.uuid, 'Com Field Grant Design')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Com Field Grant Design')"
                @resizing="changeElementSize()">
                <FieldGrantD :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].IamG.MethodG"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Com Method Grant')" @deactivated="onDeactivated(element.uuid, 'Com Method Grant')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Com Method Grant')"
                @resizing="changeElementSize()">
                <MethodGrant :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].IamG.EventG"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Com Event Grant')" @deactivated="onDeactivated(element.uuid, 'Com Event Grant')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Com Event Grant')"
                @resizing="changeElementSize()">
                <EventGrant :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].IamG.FieldG"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                vv-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Com Field Grant')" @deactivated="onDeactivated(element.uuid, 'Com Field Grant')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Com Field Grant')"
                @resizing="changeElementSize()">
                <FieldGrant :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' :location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].UCM.SoftWareCluster"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SoftWare Cluster')" @deactivated="onDeactivated(element.uuid, 'SoftWare Cluster')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SoftWare Cluster')"
                @resizing="changeElementSize()">
                <SoftwareCluster :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].UCM.SoftWarePackage"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'SoftWare Package')" @deactivated="onDeactivated(element.uuid, 'SoftWare Package')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'SoftWare Package')"
                @resizing="changeElementSize()">
                <SoftwarePackage :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' location='location'/> 
            </vue-draggable-resizable>
        </div>
        <div v-for="element in SAHLProject[openProjectIndex].UCM.VehiclePackage"  :key="element.uuid">
            <vue-draggable-resizable :id="element.uuid+location"
                class-name-active="my-active-class"
                class-name="basic-form"
                v-show="element.isVisible" :scale="zoom.value"
                :x="element.left" :y="element.top" :w=400 :h=100 :z='element.zindex'
                :resizable="true" :draggable="isDraggable"
                :handles="['mr','ml']" :min-width="400"
                @activated="onActivated(element.uuid, 'Vehicle Package')" @deactivated="onDeactivated(element.uuid, 'Vehicle Package')"
                @dragging="(left, top) => onElementDrag(element.uuid, left, top, 'Vehicle Package')"
                @resizing="changeElementSize()">
                <VehiclePackage :element='element' :isDatailView="false" :minimaptoolbar='minimaptoolbar' location='location'/> 
            </vue-draggable-resizable>
        </div>
    </v-main>
    <v-dialog v-model='dialogSelectElement' width="1200" persistent scrollable>
        <v-card>
            <v-card-title class="text-h6 green accent-1"> 
                Select Input Element  
                <v-spacer></v-spacer>
                <!-- <v-checkbox v-model="checkAll" label="Check All" dense @click="checkAllInputList"></v-checkbox> -->
            </v-card-title>
            <v-card-text>
                <br>
                <!-- <v-treeview v-model="selectElement" :items="editInputList[0].children" item-disabled="locked" activatable :open.sync="openIds" expand-icon="mdi-chevron-down" selectable dense return-object item-key="uuid"></v-treeview> -->
                <ZkTable
                    ref="editTable"
                    :data="editInputList[0].children"
                    :columns="columnsDialogSelect"
                    :stripe="props.stripe"
                    :border="props.border"
                    :show-header="props.showHeader"
                    :show-summary="props.showSummary"
                    :show-row-hover="props.showRowHover"
                    :show-index="props.showIndex"
                    :tree-type="props.treeType"
                    :is-fold="props.isFold"
                    :expand-type="props.expandType"
                    :selection-type="props.selectionType"
                    >
                </ZkTable>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn color="primary" text  @click="selectInputElement">
                    Select
                </v-btn>
                <v-btn color="primary" text @click="cancelInputElement()">
                    Cancel
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</div>
"},null]}