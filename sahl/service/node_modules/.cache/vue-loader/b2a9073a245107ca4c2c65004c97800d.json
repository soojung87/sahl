{"remainingRequest":"D:\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\service\\src\\components\\detailViewer.vue?vue&type=template&id=1d54a75a&","dependencies":[{"path":"D:\\service\\src\\components\\detailViewer.vue","mtime":1659494646000},{"path":"D:\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\service\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY0NsYXNzOiAiem9vbS13aWR0aCIsCiAgICAgIHN0eWxlOiB7IHRyYW5zZm9ybTogInNjYWxlKCIgKyBfdm0uem9vbSArICIpIiB9CiAgICB9LAogICAgWwogICAgICBfYygKICAgICAgICAidi1jYXJkIiwKICAgICAgICB7IGF0dHJzOiB7IGZsYXQ6ICIiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtdG9vbGJhciIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgZGVuc2U6ICIiLCBmbGF0OiAiIiwgY29sb3I6ICIjRkZGQUYwIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJ2LWJ0biIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNtYWxsOiAiIiwgaWNvbjogIiIgfSwKICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5oaWRlRGV0YWlsVmlld2VyIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX2MoInYtaWNvbiIsIFtfdm0uX3YoIm1kaS1jaGV2cm9uLWRvdWJsZS1yaWdodCIpXSldLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoInYtdG9vbGJhci10aXRsZSIsIFtfdm0uX3YoIkRldGFpbCBWaWV3ZXIiKV0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc21hbGw6ICIiLCBpY29uOiAiIiwgZGlzYWJsZWQ6ICFfdm0uaXNiYWNrcG9zc2libGUgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmJhY2tWaWV3ZXIoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfYygidi1pY29uIiwgW192bS5fdigibWRpLWFycm93LWxlZnQiKV0pXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzbWFsbDogIiIsCiAgICAgICAgICAgICAgICAgICAgaWNvbjogIiIsCiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICFfdm0uaXNmcm9udHBvc3NpYmxlCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5mcm9udFZpZXdlcigpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW19jKCJ2LWljb24iLCBbX3ZtLl92KCJtZGktYXJyb3ctcmlnaHQiKV0pXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzbWFsbDogIiIsCiAgICAgICAgICAgICAgICAgICAgaWNvbjogIiIsCiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IF92bS5kZXRhaWxWaWV3ZXJMaXN0Lmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWUKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRlbGV0ZURldGFpbFZpZXdlckxpc3QoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfYygidi1pY29uIiwgW192bS5fdigibWRpLWRlbGV0ZSIpXSldLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiQ29tcHUgTWV0aG9kIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJDb21wdU1ldGhvZCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhQ29tcHVNZXRob2QoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJEYXRhIENvbnN0ciIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiRGF0YUNvbnN0ciIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhRGF0YUNvbnN0cigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIkFwcGxpY2F0aW9uIEFycmF5IgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJBcHBsaWNhdGlvbkFycmF5RGF0ZSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBlbGVtZW50OiBfdm0uZWxlbWVudCwgaXNEYXRhaWxWaWV3OiB0cnVlIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiSW1wbGVtZW50YXRpb24iCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkltcGxlbWVudGF0aW9uRGF0YVR5cGUiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YUltcGxlbWVudGF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiU1cgQ29tcG9uZW50cyIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiU1dDb21wb25lbnRzIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFTV0NvbXBvbmVudCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlByb2Nlc3MgRGVzaWduIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJQcm9jZXNzRGVzaWduIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFQcm9jZXNzRGVzaWduKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiRXhlY3V0YWJsZSIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiRXhlY3V0YWJsZSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhRXhlY3V0YWJsZSgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlN0YXJ0dXAgQ29uZmlnIFNldCIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiU3RhcnR1cENvbmZpZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhU3RhcnR1cENvbmZpZygKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIkRldGVybWluaXN0aWMgQ2xpZW50IgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJEZXRlcm1pbmlzdGljQ2xpZW50IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFEZXRlcm1pbmlzdGljQ2xpZW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiTWFjaGluZSIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiTWFjaGluZSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhTWFjaGluZSgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIk1hY2hpbmUgRGVzaWducyIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiTWFjaGluZURlc2lnbiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhTWFjaGluZURlc2lnbigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIkV0aGVybmV0IENsdXN0ZXIiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkV0aGVybmV0Q2x1c3RlciIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhRXRoZXJuZXRDbHVzdGVyKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICB2aWV3SW5mbzogX3ZtLmV0aGVybmV0Q2x1c3RlckluZm8sCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiTW9kZSBEZWNsYXJhdGlvbiBHcm91cCIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiTW9kZURlY2xhcmF0aW9uR3JvdXAiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YU1vZGVEZWNsYXJhdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIkhXIEVsZW1lbnQiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkhXRWxlbWVudCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhSFdFbGVtZW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiSFcgQ2F0ZWdvcnkiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkhXQ2F0ZWdvcnkiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YUhXQ2F0ZWdvcnkoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJFcnJvciIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiQVBFcnJvciIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJFcnJvciBEb21haW4iCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkFQRXJyb3JEb21haW4iLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YUVycm9yRG9tYWluKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiRXJyb3IgU2V0IgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJBUEVycm9yU2V0IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFFcnJvclNldCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlNvbWVJUCBTZXJ2aWNlIEludGVyZmFjZSBEZXBsb3ltZW50IgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJTb21lSVBTZXJ2aWNlIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFTb21lSVBTZXJ2aWNlKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiU2VydmljZSBJbnRlcmZhY2UiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlNlcnZpY2VJbnRlcmZhY2UiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YVNlcnZpY2VJbnRlcmZhY2UoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJDbGllbnQiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkNsaWVudCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhQ2xpZW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiU2VydmVyIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJTZXJ2ZXIiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YVNlcnZlcigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlNvbWVJUCBDbGllbnQiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlNvbWVJUENsaWVudCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhU29tZUlQQ2xpZW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiU29tZUlQIFNlcnZlciIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiU29tZUlQU2VydmVyIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFTb21lSVBTZXJ2ZXIoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJTb21lSVAgVG8gTWFjaGluZSBNYXBwaW5nIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJTb21lSVB0b01hY2hpbmUiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YVNvbWVJUFRvTWFjaGluZSgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlJlcXVpcmVkIFNvbWVJUCIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiUmVxdWlyZWQiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YVJlcXVpcmVkU29tZUlQKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiUHJvdmlkZWQgU29tZUlQIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJQcm92aWRlZCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhUHJvdmlkZWRTb21lSVAoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJFMkUgUHJvZmlsZSBDb25maWd1cmF0aW9uIFNldCIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiRTJFUHJvZmlsZUNvbmZpZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhRTJFUHJvZmlsZUNvbmZpZygKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIkZpbGUgQXJyYXkiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlBlckZpbGVBcnJheSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhUEVSRmlsZUFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiRmlsZSBQcm94eSBJbnRlcmZhY2UiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlBlckZpbGVQcm94eSIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhUEVSRmlsZVByb3h5KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiS2V5ViBEYXRhYmFzZSIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiUGVyS2V5VmFsdWVEQiIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhUEVSS2V5VmFsdWVEKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiS2V5ViBEYXRhYmFzZSBJbnRlcmZhY2UiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlBlcktleVZhbHVlREkiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YVBFUktleVZhbHVlREkoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09CiAgICAgICAgICAgICAgIlBsYXRmb3JtIEhlYWx0aCBNYW5hZ2VtZW50IENvbnRyaWJ1dGlvbiIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiUEhNQ29udHJpYnV0aW9uIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFQSE1Db250cmlidXRpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJIZWFsdGggQ2hhbm5lbCBJbnRlcmZhY2UiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlBITUhlYWx0aENoYW5uZWwiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YVBITUhlYWx0aCgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlJlY292ZXJ5IEFjdGlvbiBJbnRlcmZhY2UiCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIlBITVJlY292ZXJ5IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFQSE1SZWNvdmVyeSgKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIlN1cGVydmlzZWQgRW5pdHkgSW50ZXJmYWNlIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJQSE1TdXBlcnZpc2VkIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFQSE1TdXBlcnZpc2VkKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiQ29tIE1FdGhvZCBHcmFudCBEZXNpZ24iCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIk1ldGhvZEdyYW50RCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhTWV0aG9kR3JhbnREZXNpZ24oCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5kZXRhaWxWaWV3ZXIudXVpZAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIGlzRGF0YWlsVmlldzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIG1pbmltYXB0b29sYmFyOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIDogX3ZtLmRldGFpbFZpZXdlci5lbGVtZW50ID09ICJDb20gRXZlbnQgR3JhbnQgRGVzaWduIgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJFdmVudEdyYW50RCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXREYXRhRXZlbnRHcmFudERlc2lnbigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmRldGFpbFZpZXdlci51dWlkCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgaXNEYXRhaWxWaWV3OiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgbWluaW1hcHRvb2xiYXI6IHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgOiBfdm0uZGV0YWlsVmlld2VyLmVsZW1lbnQgPT0gIkNvbSBGaWVsZCBHcmFudCBEZXNpZ24iCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoIkZpZWxkR3JhbnREIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFGaWVsZEdyYW50RGVzaWduKAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiQ29tIE1FdGhvZCBHcmFudCIKICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiTWV0aG9kR3JhbnQiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0RGF0YU1ldGhvZEdyYW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiQ29tIEV2ZW50IEdyYW50IgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJFdmVudEdyYW50IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFFdmVudEdyYW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5kZXRhaWxWaWV3ZXIuZWxlbWVudCA9PSAiQ29tIEZpZWxkIEdyYW50IgogICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJGaWVsZEdyYW50IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldERhdGFGaWVsZEdyYW50KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uZGV0YWlsVmlld2VyLnV1aWQKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBpc0RhdGFpbFZpZXc6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwdG9vbGJhcjogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}